use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.

/**
 * collect blocks lying around after a norm or deactivation
 *
 * @author Julia H.
 * @co-author Ben G.
 */
 
module attachBlocksLyingAround {

    % pick up block on oppurtunity	
	if percept(step(SimStep)),
	   bel(currentChosenTask(_, TaskStep, _, _, _, BlockType, _,_), TaskStep >= SimStep)
	   	then{
			% take the ownerless matching block
	   		if percept(thing(0, -1, block, BlockType)),
	   		   not(percept(attached(0,-1))),
	   		   not(percept(thing(0, -2, entity, _))),
	   		   not(percept(thing(-1, -1, entity, _))),
	   		   not(percept(thing(1, -1, entity, _))),
	   		   not(percept(thing(0, -2, block, _))),
	   		   not(percept(thing(-1, -1, block, _))),
	   		   not(percept(thing(1, -1, block, _)))
	   			then preActionCleanup + attach(n).
	   		if percept(thing(0, 1, block, BlockType)),
	   		   not(percept(attached(0,1))),
	   		   not(percept(thing(0, 2, entity, _))),
	   		   not(percept(thing(-1, 1, entity, _))),
	   		   not(percept(thing(1, 1, entity, _))),
	   		   not(percept(thing(0, 2, block, _))),
	   		   not(percept(thing(-1, 1, block, _))),
	   		   not(percept(thing(1, 1, block, _)))
	   			then preActionCleanup + attach(s).
	   		if percept(thing(1, 0, block, BlockType)),
	   		   not(percept(attached(1, 0))),
	   		   not(percept(thing(2, 0, entity, _))),
	   		   not(percept(thing(1, -1, entity, _))),
	   		   not(percept(thing(1, 1, entity, _))),
	   		   not(percept(thing(2, 0, block, _))),
	   		   not(percept(thing(1, -1, block, _))),
	   		   not(percept(thing(1, 1, block, _)))
	   			then preActionCleanup + attach(e).
	   		if percept(thing(-1, 0, block, BlockType)),
	   		   not(percept(attached(-1, 0))),
	   		   not(percept(thing(-2, 0, entity, _))),
	   		   not(percept(thing(-1, -1, entity, _))),
	   		   not(percept(thing(-1, 1, entity, _))),	   		   
	   		   not(percept(thing(-2, 0, block, _))),
	   		   not(percept(thing(-1, -1, block, _))),
	   		   not(percept(thing(-1, 1, block, _)))
	   			then preActionCleanup + attach(w).
	   	}

}