use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../pathfinding/randomExecuteMove" as module.
use "../actionhandling/postActionCleanup" as module.

/**
 * Rotate logic clearing block/obstacles at rotate target and then rotates
 *
 */

module rotateBlock {

	 % rotate random if block in affinity direction
	 if  bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), percept(attached(A, B)), 
	 bel(randomAffinity(DirAffi), DirBlock == DirAffi, randomRotate(Rot), oppositeRotate(Rot, AltRot), rotateToCoord(DirBlock, Rot, X, Y), rotateToCoord(DirBlock, AltRot, F, G)) then {
	 
	 	 % rotate if free
		 if not(percept(thing(X, Y, Type, _), Type \== dispenser)) then rotate(Rot) +  postActionCleanup.
		 if not(percept(thing(F, G, Type, _), Type \== dispenser)) then rotate(AltRot) +  postActionCleanup.

		 % clear blocked rotate targets
		 if percept(thing(X, Y, obstacle, _)) then clear(X, Y) +  postActionCleanup.
		 if percept(thing(X, Y, block, _)) then clear(X, Y) +  postActionCleanup.
		 if percept(thing(F, G, obstacle, _)) then clear(F, G) +  postActionCleanup.
		 if percept(thing(F, G, block, _)) then clear(F, G) +  postActionCleanup.
	 	
	 } % if rotate random

	 % rotate random if block 90 degree to affinity direction
	 if  bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), percept(attached(A, B)), 
	 bel(randomAffinity(DirAffi), oppositeDirection(DirAffi, DirOppo), DirBlock \== DirAffi, DirBlock \== DirOppo, rotateAgainstAffinity(DirAffi, DirBlock, Rot), rotateToCoord(DirBlock, Rot, X, Y)) then {
	 
		 if not(percept(thing(X, Y, Type, _), Type \== dispenser)) then rotate(Rot) +  postActionCleanup.
		 if percept(thing(X, Y, obstacle, _)) then clear(X, Y) +  postActionCleanup.
		 if percept(thing(X, Y, block, _)) then clear(X, Y) +  postActionCleanup.

	} % rotate random if block 90 degree
	
	% obligatory skip
	if true then skip +  postActionCleanup.  
	
} % module