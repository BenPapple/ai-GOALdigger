use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.
use "../pathfinding/executeMoveAndRequestAroundDispenser" as module.
use "../pathfinding/executeMoveAroundSubmitter" as module.
use "../pathfinding/executeMoveAroundBloke" as module.
use "../taskhandling/changeTaskCheck" as module.
use "../taskhandling/handleTaskSubmit" as module.
use "../blockhandling/rotateBlockAgainstAffinity" as module.
use "../blockhandling/rotateBlockToNorth" as module.
use "../blockhandling/connectBlocks" as module.

/**
 * Main decision rules for role test worker
 *
 */

module executeTestWorkerRole {

	% preferred target switches
	if not(bel(searchInGoalzone)) then insert(searchInGoalzone).
	%if not(bel(searchInDispenser)) then insert(searchInDispenser).

    /**
	 * WITHOUT BLOKE	
	 *
	 */	
	
		 
	if bel(attachedBlokes(Count), Count < 2) then {

		% attach bloke if next to it
		if percept(thing(X, Y, entity, _), abs(X) =< 1, abs(Y) =< 1), not(percept(attached(X,Y))) then {
		   % update empty time counter of all dispensers nearby
		   forall percept(thing(X0, Y0, dispenser, _)), not(percept(thing(X1, Y1, entity, _), X1 \= 0, Y1 \= 0)),
		   bel(agentAt(X2, Y2, _), localize(X0, Y0, X2, Y2, X3, Y3)) do {
		      if bel(emptyDispenserCounter(X3, Y3, Count)) then delete(emptyDispenserCounter(X3, Y3, Count)).
		   } % end empty time counter update
		    
		   if true then executeMoveAroundBloke. % attach the bloke
		}
		
		% go to bloke if next to it
		if percept(thing(X, Y, entity, _)), bel(abs(X) + abs(Y) >= 2) then {
			if bel(X > 0), bel(Y =:= 0), not(percept(attached(1,_))) then move(e).
			if bel(X < 0), bel(Y =:= 0), not(percept(attached(-1,_))) then move(w).
			if bel(Y > 0), bel(X =:= 0), not(percept(attached(_,1))) then move(s).
			if bel(Y < 0), bel(X =:= 0), not(percept(attached(_,-1))) then move(n).
			if bel(X > 0), bel(Y \= 0) then move(e).
			if bel(X < 0), bel(Y \= 0) then move(w).
			if bel(Y > 0), bel(X \= 0) then move(s).
			if bel(Y < 0), bel(X \= 0) then move(n).
		}


		% if no agent around, go to a goal zone
		if not(percept(thing(X, Y, entity, _))), bel(X \= 0; Y \=0), not(percept(thing(_,_,goalZone,_))), 
		   bel(targetMd(_, _, goalZone), executeManhattan) then executeManhattanMove.
		
		% if no agent around, go to a dispenser
		if not(percept(thing(X, Y, entity, _))), bel(X \= 0; Y \=0), not(percept(thing(_,_,dispenser,_))), 
		   bel(targetMd(_, _, dispenser), executeManhattan) then executeManhattanMove. 


		% if at a dispenser and no agents around, count steps without seeing agents around
		if percept(thing(X0, Y0, dispenser, _)), not(percept(thing(X1, Y1, entity, _), X1 \= 0, Y1 \= 0)),
		   bel(agentAt(X2, Y2, _), localize(X0, Y0, X2, Y2, X3, Y3))
		then {
		   if bel(emptyDispenserCounter(X3, Y3, Count), NewCount is Count + 1)
		   then delete(emptyDispenserCounter(X3, Y3, Count)) + insert(emptyDispenserCounter(X3, Y3, NewCount)).
		   if not(bel(emptyDispenserCounter(X3, Y3, _))) then insert(emptyDispenserCounter(X3, Y3, 1)).
		}
			
		if true then executeRandomMove.
	
	
	} % end haveBlockAttached(false,_)
    
    /**
	 * WITH BLOKE
	 *
	 */
	 % ToDo: Get out of the way of other agents
	 % ToDo: Get to a random place when more than one bloke attached
	 		  
	if bel(attachedBlokes(Count), Count == 2) then executeRandomMove.
	
	if true then skip.

	
}