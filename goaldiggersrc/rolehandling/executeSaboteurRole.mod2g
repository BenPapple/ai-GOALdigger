use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.

/**
 * Main decision rules for saboteur
 *
 * @author Isaac S.
 *
 */

module executeSaboteurRole {	
	
	% adopt digger role if in role zone
	if not(percept(role(digger))), percept(roleZone(0,0))
	  then adapt(digger).
	
	% persecute southward block carrying agent if available
	%if bel(agentAt(X0,Y0,_), targetMd(X1,Y1, blockCarrierSubmitter), abs(X1-X0) + abs(Y1-Y0) > 2, executeManhattan)
	%then allother.send(msg("Last action performed: persecute southward carrier 1")) + executeManhattanMove.
		
	% attack agent if target available
	if bel(clearingTarget(X,Y)) then allother.send(msg("Last action performed: attack agent")) +  clear(X,Y).

    % execute manhattan move if not false 
    if bel(targetMd(A, B, _), executeManhattan)
      then executeManhattanMove.

	% roam if no distant goal zone available
	%if bel(emptyGoalZoneCounter(_,_,Count), waitingTimeEmptyGoalZone(Time), Count > Time)
	%   then allother.send(msg("Last action performed: roam")) + executeRandomMove.

	% clear blocks when in goal zone
	%if percept(goalZone(0,0), thing(X, Y, obstacle, _), abs(X) + abs(Y) =:= 1) 
	%   then clear(X,Y).				

	if true then allother.send(msg("Last action performed: randommove")) +executeRandomMove.

	if true then allother.send(msg("Last action performed: skip")) + skip.
	
	

	
}