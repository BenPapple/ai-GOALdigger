use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.

/**
 * Main decision rules for saboteur
 *
 * @author Isaac S.
 *
 */

module executeSaboteurRole {	
		
	% attack agent if target available
	if bel(clearingTarget(X,Y)) then allother.send(msg("Last action performed: attack agent")) +  clear(X,Y).

	% persecute carried block if available
	if bel(targetMd(_, _, blockCarrier), executeManhattan)
	then allother.send(msg("Last action performed: persecute carrier")) + executeManhattanMove.

	% persecute agent if available
	if bel(targetMd(_, _, agent), executeManhattan)
	then allother.send(msg("Last action performed: persecute agent")) + executeManhattanMove.

%		% roam goal zone if still not declared empty
%		if percept(goalZone(0,0)), bel(whitelistedTeam(MyTeam)), 
%		   not(percept(thing(X1,Y1,entity,OtherTeam), goalZone(X1,Y1), OtherTeam \= MyTeam, (X1 \= 0; Y1 \= 0))), 
%		   not(percept(attached(X1, Y1))), bel(agentAt(X4, Y4, _)), 
%		   not(bel(minimumDistanceEmptyGoalZone(Distance), waitingTimeEmptyGoalZone(Time), emptyGoalZoneCounter(X5, Y5, C), 
%		   calculateXYMd(X5, Y5, X4, Y4, Md), Md < Distance, C > Time)) then executeManhattanMove.

	% go to goalzone if available
	if bel(targetMd(A, B, goalzone), (A \= 111; B \= 111), executeManhattan)
	then allother.send(msg("Last action performed: go to goalzone")) + executeManhattanMove.

	% roam if no distant goal zone available
	if bel(emptyGoalZoneCounter(_,_,Count), waitingTimeEmptyGoalZone(Time), Count > Time)
	   then allother.send(msg("Last action performed: roam")) + executeRandomMove.

	% clear blocks when in goal zone
	if percept(goalZone(0,0), thing(X, Y, obstacle, _), abs(X) + abs(Y) =:= 1) 
	   then clear(X,Y).				

	if true then allother.send(msg("Last action performed: randommove")) +executeRandomMove.

	if true then allother.send(msg("Last action performed: skip")) + skip.
	
	

	
}