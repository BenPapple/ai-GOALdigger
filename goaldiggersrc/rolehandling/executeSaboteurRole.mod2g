use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.
use "../pathfinding/executeMoveAndRequestAroundDispenser" as module.
use "../pathfinding/executeMoveAroundSubmitter" as module.
use "../pathfinding/executeMoveAroundBloke" as module.
use "../taskhandling/handleTaskSubmit" as module.
use "../blockhandling/rotateBlockAgainstAffinity" as module.
use "../blockhandling/rotateBlockToNorth" as module.
use "../blockhandling/connectBlocks" as module.
use "../blockhandling/detachBloke" as module.

/**
 * Main decision rules for saboteur
 *
 */

module executeSaboteurRole {

	% preferred target switches
	if not(bel(searchInGoalzone)) 
	   then insert(searchInGoalzone).
	
%	% bloke quantity
	if not(bel(targetBlokeCount(_))) 
	   then insert(targetBlokeCount(4)). 

	% insert minimum distance for different goal zones
	if not(bel(minimumDistanceEmptyGoalZone(_)))
	   then insert(minimumDistanceEmptyGoalZone(15)).
	
	% insert waiting time in empty goal zone
	if not(bel(waitingTimeEmptyGoalZone(_)))
	   then insert(waitingTimeEmptyGoalZone(15)).	
	
%	% detach blocks if they were attached by chance
%	if bel(haveBlockAttached(true, Dir)) 
%	   then detach(Dir).
	
	% select sabotage goal
	if not(bel(whitelistedTeam(_))), bel(sabotageThem), percept(team(MyTeam)) 
	   then insert(whitelistedTeam(MyTeam)).
	
	if not(bel(whitelistedTeam(_))), bel(sabotageUs) 
	   then insert(whitelistedTeam(fakeTeamName)).

%	% drag single blokes
%	if not(bel(dragger)) then insert(dragger).
		
	%if not(bel(searchInDispenser)) then insert(searchInDispenser).



    /**
	 * WITHOUT BLOKE	
	 *
	 */	
	
	
	if bel(attachedBlokes(Count), targetBlokeCount(Target), Count < Target) then {	

	
%		% DEPRECATED SABOTEUR FEATURES
%		% stop dragging single blokes
%		if bel(dragging, dragCounter(DragCount), DragCount > 5), not(percept(goalZone(_,_)))
%		   then delete(dragging) + delete(dragCounter(DragCount)) + detachBloke.
%
%		% drag single blokes	
%		if bel(dragger, attachedBlokes(Count), Count =:= 1)
%		   then {
%		     if not(bel(dragging)) then insert(dragging) + insert(dragCounter(0)).
%		     if true then executeRandomMove.
%		}

%		% attach blokes anywhere if dragger 
%		if bel(dragger, attachedBlokes(Count), Count =:= 0, whitelistedTeam(MyTeam)), 
%		   percept(thing(X, Y, entity, OtherTeam), MyTeam \= OtherTeam, abs(X) =< 1, abs(Y) =< 1),
%		   not(bel(X =:= 0, Y =:= 0)), not(percept(attached(X,Y)))
%		    then executeMoveAroundBloke.

%		% go to bloke anywhere if dragger without blokes attached
%		if bel(dragger, attachedBlokes(Count), Count =:= 0, targetMd(_, _, agent), executeManhattan)
%		then allother.send(executingManhattan("Following someone!")) + executeManhattanMove.


%		% attack blocke if next to it
%		if bel(whitelistedTeam(MyTeam)), percept(thing(X, Y, entity, OtherTeam), MyTeam \= OtherTeam, (X =:= 0; Y =:= 0),
%			   X =< 5, Y =< 5), not(bel(X =:= 0, Y =:= 0)) 
%			   then clear(X,Y).

		% attack bloke if next to it
		if bel(whitelistedTeam(MyTeam)), percept(thing(X, Y, entity, OtherTeam), MyTeam \= OtherTeam, abs(X) + abs(Y) =< 2),
		   not(bel(X =:= 0, Y =:= 0)),
		   percept(thing(X1, Y1, block, _), attached(X1, Y1), abs(X1-X) + abs(Y1-Y) =:= 1)
			   then clear(X,Y).

		% attack bloke if next to it
		%if bel(whitelistedTeam(MyTeam)), percept(thing(X, Y, entity, OtherTeam), MyTeam \= OtherTeam, abs(X) + abs(Y) =< 2),
		%   not(bel(X =:= 0, Y =:= 0)) 
		%	   then clear(X,Y).

		% go to bloke anywhere
		if bel(targetMd(_, _, agent), executeManhattan)
		then allother.send(executingManhattan("Following someone!")) + executeManhattanMove.		

			
%		% attach bloke if next to it next to goal zone (without attached blokes)
%		if bel(whitelistedTeam(MyTeam)), percept(thing(X, Y, entity, OtherTeam), MyTeam \= OtherTeam, abs(X) =< 1, 
%		       abs(Y) =< 1, goalZone(_,_)), not(bel(X =:= 0, Y =:= 0)), 
%		   bel(attachedBlokes(Count), Count == 0), not(percept(attached(X,Y))) then {
%		   % update empty time counter of all dispensers nearby
%		      if bel(searchInDispenser) then {
%		         forall percept(thing(X0, Y0, dispenser, _)), not(percept(thing(X1, Y1, entity, _), X1 \= 0, Y1 \= 0)),
%		                bel(agentAt(X2, Y2, _), localize(X0, Y0, X2, Y2, X3, Y3)) do {
%		                if bel(emptyDispenserCounter(X3, Y3, Count)) then delete(emptyDispenserCounter(X3, Y3, Count)).
%		     } 
%		   }% end empty time counter update
%		    
%		   if true then executeMoveAroundBloke. % attach the bloke
%		}
		
%		% attach bloke anywhere if at least one bloke already attached
%		if bel(whitelistedTeam(MyTeam)), percept(thing(X, Y, entity, OtherTeam), MyTeam \= OtherTeam, abs(X) =< 1, abs(Y) =< 1), 
%		   bel(attachedBlokes(Count), Count > 0), not(percept(attached(X,Y))) then {
%		   % update empty time counter of all dispensers nearby
%		   if true then executeMoveAroundBloke. % attach the bloke
%		}


		if bel(targetMd(_, _, agent), executeManhattan)
		then executeManhattanMove.

		% roam goal zone if still not declared empty
		if percept(goalZone(0,0)), bel(whitelistedTeam(MyTeam)), 
		   not(percept(thing(X1,Y1,entity,OtherTeam), goalZone(X1,Y1), OtherTeam \= MyTeam, (X1 \= 0; Y1 \= 0))), 
		   not(percept(attached(X1, Y1))), bel(agentAt(X4, Y4, _)), 
		   not(bel(minimumDistanceEmptyGoalZone(Distance), waitingTimeEmptyGoalZone(Time), emptyGoalZoneCounter(X5, Y5, C), 
		   calculateXYMd(X5, Y5, X4, Y4, Md), Md < Distance, C > Time)) then executeManhattanMove. %{
		     
		     %forall bel(randomDirection(Dir), directionToCoordinate(Dir, X2, Y2)), percept(goalZone(X2, Y2)) do {
		     %		if percept(thing(X2, Y2, obstacle, _)) then clear(X2, Y2).
		     % 		if not(percept(thing(X2, Y2, obstacle, _))) then move(Dir).
		     %}		        
		%}

		if bel(attachedBlokes(Count), Count == 0), bel(targetMd(_, _, goalzone), executeManhattan)
		then executeManhattanMove.
				

		% roam if no distant goal zone available
		if bel(emptyGoalZoneCounter(_,_,Count), waitingTimeEmptyGoalZone(Time), Count > Time, attachedBlokes(Count), 
		       Count == 0)
		   then executeRandomMove.

		% clear blocks when in goal zone
		if percept(goalZone(0,0), thing(X, Y, obstacle, _), abs(X) + abs(Y) =:= 1) 
		   then clear(X,Y).				

		
		if bel(attachedBlokes(Count), Count == 0) then executeRandomMove.
		
		if bel(dragger) then executeRandomMove.

		if percept(thing(X,Y,obstacle,_), abs(X) + abs(Y) =:= 1) then clear(X,Y).

		if true then skip.
	
	
	} % end haveBlockAttached(false,_)
    
    /**
	 * WITH BLOKE
	 *
	 */
	 % ToDo: Get out of the way of other agents
	
	if bel(attachedBlokes(Count), targetBlokeCount(Target), Count =:= Target) then {
		
		if true then executeRandomMove. 
	
	}

	
}