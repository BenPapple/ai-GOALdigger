use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.
use "../pathfinding/executeMoveAndRequestAroundDispenser" as module.
use "../pathfinding/executeMoveAroundSubmitter" as module.
use "../pathfinding/executeMoveAroundBloke" as module.
use "../taskhandling/handleTaskSubmit" as module.
use "../blockhandling/rotateBlockAgainstAffinity" as module.
use "../blockhandling/rotateBlockToNorth" as module.
use "../blockhandling/connectBlocks" as module.
use "../blockhandling/detachBloke" as module.

/**
 * Main decision rules for saboteur
 *
 */

module executeSaboteurRole {

	if true then {	

		
		% clear block if target available
		if percept(thing(X,Y,block,_), abs(X)+abs(Y) =:= 1, goalzone(_,_)), not(percept(attached(X,Y))) 
		   then allother.send(msg("Block cleared")) + clear(X,Y).

		% attack bloke if target available
		if bel(clearingTarget(X,Y)) then clear(X,Y).


		% persecute carried block if available
		if bel(targetMd(_, _, blockCarrier), executeManhattan)
		then executeManhattanMove.

		% persecute agent block if available
		if bel(targetMd(_, _, agent), executeManhattan)
		then executeManhattanMove.

%		% roam goal zone if still not declared empty
%		if percept(goalZone(0,0)), bel(whitelistedTeam(MyTeam)), 
%		   not(percept(thing(X1,Y1,entity,OtherTeam), goalZone(X1,Y1), OtherTeam \= MyTeam, (X1 \= 0; Y1 \= 0))), 
%		   not(percept(attached(X1, Y1))), bel(agentAt(X4, Y4, _)), 
%		   not(bel(minimumDistanceEmptyGoalZone(Distance), waitingTimeEmptyGoalZone(Time), emptyGoalZoneCounter(X5, Y5, C), 
%		   calculateXYMd(X5, Y5, X4, Y4, Md), Md < Distance, C > Time)) then executeManhattanMove. %{
%		     
%		     %forall bel(randomDirection(Dir), directionToCoordinate(Dir, X2, Y2)), percept(goalZone(X2, Y2)) do {
%		     %		if percept(thing(X2, Y2, obstacle, _)) then clear(X2, Y2).
%		     % 		if not(percept(thing(X2, Y2, obstacle, _))) then move(Dir).
%		     %}		        
%		%}

		if bel(targetMd(_, _, goalzone), executeManhattan)
		then executeManhattanMove.
		

		% roam if no distant goal zone available
		if bel(emptyGoalZoneCounter(_,_,Count), waitingTimeEmptyGoalZone(Time), Count > Time, attachedBlokes(Count), 
		       Count == 0)
		   then executeRandomMove.

		% clear blocks when in goal zone
		if percept(goalZone(0,0), thing(X, Y, obstacle, _), abs(X) + abs(Y) =:= 1) 
		   then clear(X,Y).				

		
		if percept(thing(X,Y,obstacle,_), abs(X) + abs(Y) =:= 1) then clear(X,Y).

		if true then executeRandomMove.
	
	
	
	} 

	
}