use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/postActionCleanup" as module.
use "../pathfinding/manhattanExecuteMove" as module.
use "../pathfinding/randomExecuteMove" as module.
use "../pathfinding/stepAndRequestAroundDispenser" as module.
use "../taskhandling/chooseTask" as module.
use "../taskhandling/handleTaskSubmit" as module.
use "../blockhandling/rotateBlock" as module.

/**
 * Main decision rules for role worker
 *
 */

module roleWorker {

	    /**
		 * WITHOUT BLOCK	
		 *
		 */	
		if bel(haveBlockAttached(false,_)) then {
		
			% as worker change task when task expired or initial task has -1 million steps
	    	if percept(step(Step)), bel(currentChosenTask(_, TaskStep, _, _, _, _), TaskStep < Step) then chooseTask.
	    	
	        % Movement around dispenser when without block
		    if percept(step(SimStep)), bel(currentChosenTask(_, TaskStep, _, _, _, BlockType), TaskStep >= SimStep), percept(thing(A, B, dispenser, BlockType), abs(A) =< 1, abs(B) =< 1), 
		    	not(bel(executeManhattan)) then stepAndRequestAroundDispenser.
	    	
	    	% manhattan move to dispenser
	    	if percept(step(SimStep)), bel(targetMd(_, _, dispenser), executeManhattan, currentChosenTask(_, TaskStep, _, _, _, _), TaskStep >= SimStep) then manhattanExecuteMove.

    	    % execute random explorer move without attached blocks with affinity to one direction
			if true then randomExecuteMove. 
		
		} % end haveBlockAttached(false,_)
	    
	    /**
		 * WITH BLOCK
		 *
		 */		  
    	if bel(haveBlockAttached(true,DirBlock)) then {
    	
	    	% detach block if task does not fit
	    	if bel(directionToCoordinate(DirBlock, A, B)), percept(thing(A, B, block, BlockTypeAttached), step(SimStep)), 
	    		bel(currentChosenTask(_, TaskStep, _, _, _, BlockType), BlockType \== BlockTypeAttached, TaskStep >= SimStep) then postActionCleanup + detach(DirBlock).
	    
	    	% submit task if in goal zone with block and corresponding task available
	    	if bel(currentChosenTask(_, _, _, _, _, BlockType)), percept(task(_,TaskStep,_,[req(_,_,BlockType)]), goalZone(0,0)), bel(step(SimStep), TaskStep >= SimStep) then handleTaskSubmit.
	    	
	    	% Move to goal zone
		    if bel(executeManhattan), percept(task(_,TaskStep,_,[req(_,_,_)])), bel(step(SimStep), TaskStep >= SimStep) then manhattanExecuteMove.
	        	
	    	% wait in goal zone with block for right task
	    	if percept(goalZone(0,0), step(SimStep)), bel(currentChosenTask(_, TaskStep, _, _, _, _), TaskStep =< SimStep) then handleTaskSubmit.	    	
	    	 	    	
	    	% Movement according to Manhatten Distance
		    if bel(executeManhattan) then manhattanExecuteMove.
		    
		    % random movemement actions while having block attached
	    	if bel(haveBlockAttached(true, DirBlock)) then {
	    
	    		% rotate block behind agent direction affinity
	    		if  bel(directionToCoordinate(DirBlock, A, B)), percept(thing(A, B, block, _)), bel(randomAffinity(Dir), oppositeDirection(Dir, OppoDir), 
	    			DirBlock \== OppoDir) then rotateBlock.
	    
	    		% if block behind agent concerning affinity direction move forward
	    		if bel(directionToCoordinate(DirBlock, A, B)), percept(thing(A, B, block, _)), bel(randomAffinity(Dir), oppositeDirection(Dir, Dir3), 
	    			Dir3 == DirBlock) then randomExecuteMove.  
	    
	    		} % if bel(haveBlockAttached(true, DirBlock))
    		
    	} % end haveBlockAttached(true,_)	    
	    

	
}