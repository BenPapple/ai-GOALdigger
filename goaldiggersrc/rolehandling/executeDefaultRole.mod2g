use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.
use "../blockhandling/detachBloke" as module.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.
use "../pathfinding/helperMoveWithoutBlock" as module.


/**
 * Main decision rules for role default
 *
 */

module executeDefaultRole {

		% if caught, get free
		if bel(getFree) then detachBloke.

    	% if oppurtunity arises adapt targetRole role until complex role module ready
    	if percept(roleZone(0, 0), step(Step), Step >= 0), 
    	   bel(targetRole(TargetRole)) 
    		then preActionCleanup + adapt(TargetRole).
    		
    	% Movement according to Manhatten Distance
	    if bel(executeManhattan, targetMd(_, _, rolezone)) 
	    	then executeManhattanMove.
    	
    	% Explorer map until one Dispenser and one goalZone is known
		if not(bel(mapGoalZone(_, _, _))), not(bel(executeManhattan)), not(bel(mapDispenser(_, _, _, _, _, _))),
		   bel(exploreDirection(Dir), randomAffinity(Dir2)) 
			then { 
				if bel(Dir == r) then executeRandomMove.
				if true then delete(randomAffinity(Dir2)) + insert(randomAffinity(Dir)) + helperMoveWithoutBlock.	
		}
	    
	    % explore
	    if true then executeRandomMove. 	    
	
} % end module