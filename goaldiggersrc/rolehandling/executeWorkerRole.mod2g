use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.
use "../pathfinding/executeManhattanMove" as module.
use "../pathfinding/executeRandomMove" as module.
use "../pathfinding/executeMoveAndRequestAroundDispenser" as module.
use "../pathfinding/executeMoveAroundSubmitter" as module.
use "../pathfinding/helperMoveWithoutBlock" as module.
use "../taskhandling/handleTaskSubmit" as module.
use "../blockhandling/detachBloke" as module.
use "../blockhandling/rotateBlockAgainstAffinity" as module.
use "../blockhandling/rotateBlockToNorth" as module.
use "../blockhandling/connectBlocks" as module.

/**
 * Main decision rules for role worker
 *
 * @author Ben G.
 */

module executeWorkerRole {

	if bel(customRole(customRoleSaboteur)), percept(roleZone(0,0))
	   then preActionCleanup + adapt(digger).

	% if caught, get free
	if bel(getFree) then detachBloke.

    /**
	 * WITHOUT BLOCK	
	 *
	 */	
	if bel(haveBlockAttached(false,_)) 
		then {
		
			% Change Role to Explorer
			if percept(roleZone(0, 0), step(Step), Step >= 0, role(Role)), 
			   bel(targetRole(TargetRole), Role \= TargetRole) 
			    then preActionCleanup + adapt(TargetRole).
			
	 	    % Movement around dispenser when without block
		    if percept(step(SimStep)), 
		       bel(currentChosenTask(_, TaskStep, _, _, _, BlockType, _,_), TaskStep >= SimStep), 
		       percept(thing(A, B, dispenser, BlockType), abs(A) =< 1, abs(B) =< 1)
		        then executeMoveAndRequestAroundDispenser.
	    	
	    	% manhattan move to dispenser
	    	if percept(step(SimStep)), 
	    	   bel(targetMd(_, _, dispenser), executeManhattan, currentChosenTask(_, TaskStep, _, _, _, _,_,_), 
	    	       TaskStep >= SimStep) then executeManhattanMove.	
	    	       
	    	% Explorer map until execute Manhattan is set
			if not(bel(executeManhattan)),
			   bel(exploreDirection(Dir), randomAffinity(Dir2)) 
				then { 
					if bel(Dir == r) then executeRandomMove.
					if true then delete(randomAffinity(Dir2)) + 
								 insert(randomAffinity(Dir)) + helperMoveWithoutBlock.
				    if true then preActionCleanup + skip.
			}		
	
		    % execute random explorer move without attached blocks with affinity to one direction
			if true then executeRandomMove. 
			
	} % end haveBlockAttached(false,_)
    
    /**
	 * WITH BLOCK
	 *
	 */		  
	if bel(haveBlockAttached(true,DirBlock)) 
		then {

			% detach after connect success as supportingAgent
			if percept(lastActionResult(success), lastAction(connect)),
			   not(bel(submitterLeader))
			    then preActionCleanup + detach(DirBlock).
		
	    	% detach block if task does not fit
	    	if bel(directionToCoordinate(DirBlock, A, B)), 
	    	   percept(thing(A, B, block, BlockTypeAttached), step(SimStep)), 
	    	   bel(currentChosenTask(_, TaskStep, _, _, _, BlockType, _, _), 
	    	       BlockType \== BlockTypeAttached, TaskStep >= SimStep) 
	    	    then preActionCleanup + detach(DirBlock).

			% Moving around 2task Submitting agent in rain drop pattern 
			if percept(team(Team), thing(XSubmit, YSubmit, entity, Team), goalZone(XSubmit, YSubmit), XBlock is XSubmit,
			           YBlock is YSubmit + 1, thing(XBlock, YBlock, block, SouthBlock), 
			           XPlusY is abs(XSubmit) + abs(YSubmit), XPlusY \= 0, attached(XBlock, YBlock), step(SimStep)),
			   bel(abs(XSubmit) =< 1, abs(YSubmit) =< 1),
			   bel(currentChosenTask(TaskName, TaskStep, _, _, _, _, supportingAgent, SubmitterName)),
			   bel(storedOtherAgentStatus(SubmitterName, _, _, _, _, _, _, SubmitterBlockTypeAttached, _), 
				   SubmitterBlockTypeAttached == SouthBlock),           
			   percept(task(TaskName, _, 40,[req(_, _, _),req(_, _, _)]), TaskStep >= SimStep)  
				then executeMoveAroundSubmitter.

			% Moving around 3task Submitting agent in rain drop pattern 
			if percept(team(Team), thing(XSubmit, YSubmit, entity, Team), goalZone(XSubmit, YSubmit), XBlock is XSubmit,
			           YBlock is YSubmit + 1, thing(XBlock, YBlock, block, SouthBlock), 
			           XPlusY is abs(XSubmit) + abs(YSubmit), XPlusY \= 0, attached(XBlock, YBlock), step(SimStep)),
			   bel(abs(XSubmit) =< 1, abs(YSubmit) =< 1),
			   bel(currentChosenTask(TaskName, TaskStep, _, _, _, _, supportingAgent, SubmitterName)),
			   bel(storedOtherAgentStatus(SubmitterName, _, _, _, _, _, _, SubmitterBlockTypeAttached, _), 
				   SubmitterBlockTypeAttached == SouthBlock),           
			   percept(task(TaskName, _, 90,[req(_, _, _),req(_, _, _),req(_, _, _)]), TaskStep >= SimStep)  
				then executeMoveAroundSubmitter.
			
	    	% as submitterLeader don't wait on goalzone and on dispenser
	    	if bel(currentChosenTask(_, TaskStep, _, _, _, _,SubmitType, _)),
	           bel(SubmitType == submittingAgentTwoTask; SubmitType == submittingAgentThreeTask; 
	               SubmitType == submittingAgentFourTask),
	    	   percept(goalZone(0,0), thing(0, 0, dispenser, _), step(SimStep), TaskStep >= SimStep) 
	    	    then executeRandomMove.
	    	    
	    	% as submitterLeader don't have block on dispenser
	    	if bel(currentChosenTask(_, TaskStep, _, _, _, _,SubmitType, _)),
	           bel(SubmitType == submittingAgentTwoTask; SubmitType == submittingAgentThreeTask; 
	               SubmitType == submittingAgentFourTask),
	    	   percept(goalZone(0,0), thing(0, 1, dispenser, _), step(SimStep), TaskStep >= SimStep) 
	    	    then executeRandomMove.
	    	    
	        % as submitter move on occupied south position
	    	if bel(currentChosenTask(_, TaskStep, _, _, _, _, SubmitType, _)),
	    	   percept(goalZone(0,0), thing(0, 1, entity, _), step(SimStep), TaskStep >= SimStep),
	    	   bel(SubmitType == submittingAgentTwoTask; SubmitType == submittingAgentOneTask; 
	    	       SubmitType == submittingAgentThreeTask; SubmitType == submittingAgentFourTask) 
	    	    then executeRandomMove.
	
	    	% submit 1-task if in goal zone with block and corresponding task available
	    	if bel(currentChosenTask(TaskName, TaskStep, _, _, _, _,submittingAgentOneTask, _)),
	    	   percept(task(TaskName ,TaskStep, 10,[req(_,_,_)])),
	    	   percept(goalZone(0,0), step(SimStep), TaskStep >= SimStep) 
	    	   	then handleTaskSubmit.
	    	 
	    	% as 1tasksubmitter/supportingAgent with no active task explore  
	        if bel(currentChosenTask(_, TaskStep, _, _, _, _, PlanType, _)),
	           bel(PlanType == supportingAgent; PlanType == submittingAgentOneTask),
	    	   percept(step(SimStep), TaskStep < SimStep) 
	    	   	then executeRandomMove.
	    
	    	% submit task if in goal zone with block and corresponding task available
	    	if bel(currentChosenTask(_, TaskStep, _, _, _, _,SubmitType, _)),
	           bel(SubmitType == submittingAgentTwoTask; SubmitType == submittingAgentThreeTask; 
	               SubmitType == submittingAgentFourTask),
	    	   percept(goalZone(0,0), step(SimStep), TaskStep >= SimStep) 
	    	   	then handleTaskSubmit.
	    	
	    	% Prepare for connect by rotating block to north and if north connect
	    	if bel(agentAt(X, Y, _), targetMd(X, Y, supportingPosition), DirBlock \= n),
	    	   bel(currentChosenTask(_, TaskStep, _, _, _, _, supportingAgent, _)),
	    	   percept(step(SimStep), TaskStep >= SimStep)
	    	    then rotateBlockToNorth.
	    	if bel(agentAt(X, Y, _), targetMd(X, Y, supportingPosition)),
	    	   bel(currentChosenTask(_, TaskStep, _, _, _, _, supportingAgent, _)),
	    	   percept(step(SimStep), TaskStep >= SimStep)
	    	    then preActionCleanup + connectBlocks.
	    	 
	    	% Move to supporting position for multi task
	    	if bel(executeManhattan, currentChosenTask(_, TaskStep, _, _, _, _, supportingAgent, _), 
	    	       targetMd(_, _, supportingPosition)), 
	    	   bel(step(SimStep), TaskStep >= SimStep)
	    	    then executeManhattanMove.
	    	
	    	% Move to goal zone to submit block
		    if bel(executeManhattan, currentChosenTask(_, TaskStep, _, _, _, _, SubmitType, _), 
		           targetMd(_, _, goalzone)), 
		       bel(step(SimStep), TaskStep >= SimStep),
		       bel(SubmitType == submittingAgentTwoTask; SubmitType == submittingAgentOneTask; 
		           SubmitType == submittingAgentThreeTask; SubmitType == submittingAgentFourTask) 
		        then executeManhattanMove.
	        	
	    	% random movemement actions while having block attached
	    	if bel(haveBlockAttached(true, DirBlock)) 
	    		then executeRandomMove.
	} % end haveBlockAttached(true,_)	
	
}