use "../goaldiggerProlog" as knowledge.
use "./checkBlockNorms" as module.
use "./checkRoleNorms" as module.

/**
 * analyze norms and make plans about actions to remedy them
 * with block-norm only the zero-set is considered, because agents normally do not carry more blocks. 
 *
 * @author Julia H.
 * @co-author Ben G.
 */

module analyzeNorms {
	
%	% Delete norms marker
%	if bel(waitingForNorms)
%		then delete(waitingForNorms).
		
	% Delete all expired norms
	if bel(avoidNorm(NormName,V2,V3,StepEnd,V5,V6,V7,V8,V9,V10)),
	   percept(step(SimStep), SimStep > StepEnd)
		then delete(avoidNorm(NormName,V2,V3,StepEnd,V5,V6,V7,V8,V9,V10)).
		
%	% Set norms marker
%	if bel(avoidNorm(_,dropBlock,StepStart,StepEnd,_,_,_,_,_,_)),
%	   percept(step(SimStep), SimStep >= StepStart - 1, SimStep =< StepEnd), 
%	   not(bel(waitingForNorms))
%		then insert(waitingForNorms).
		
	% Branch into appropriate norms		
	if true 	
		then checkBlockNorms.
		
	if percept(step(SimStep), SimStep > 3333) 
		then checkRoleNorms.

    % delete block norms with actions if agent has no blocks before norm starts 
		
}



