use "../goaldiggerProlog" as knowledge.


/**
 * analyze norms and make plans about actions to remedy them
 * with block-norm only the zero-set is considered, because agents normally do not carry more blocks. 
 *
 * @author Julia H.
 * @co-author Ben G.
 */
 
module checkBlockNorms {
	
	% ready analyzed norm should be saved
	% block-norm draws less energy than the agent has, ignore norm
	if percept(norm(NormName,StepStart,StepEnd,[requirement(block,any,0)],Dmg)), 
	   not(bel(avoidNorm(NormName,_,_,_,_,_,_,_,_,_))), 
	   percept(energy(AgentEnergy))
		then {
			if bel(Duration is StepEnd - StepStart),
			   bel(MaxPenalty is Duration * Dmg),
			   bel(MaxPenalty < AgentEnergy)
				then insert(avoidNorm(NormName,doNothing,na,na,na,na,na,na,na,na)).
		}
	
	% block-norm drains more energy than the agent has, drop the block	
	if percept(norm(NormName,StepStart,StepEnd,[requirement(block,any,0)],Dmg)), 
	   not(bel(avoidNorm(NormName,_,_,_,_,_,_,_,_,_))), 
	   percept(energy(AgentEnergy))
		then {
			if bel(Duration is StepEnd - StepStart),
			   bel(MaxPenalty is Duration * Dmg),
			   bel(MaxPenalty >= AgentEnergy)
				then insert(avoidNorm(NormName,dropBlock,StepStart,StepEnd,block,any,0,Dmg,na,na)).
		}
	
%norm(n3,184,212,[requirement(block,any,3)],3)
%norm(n3,start,until,[requirement(block,immer auf "any",max nr of carried blocks,)],Schaden)

}