use goaldiggerProlog as knowledge.

/**
 * File initializes first knowledge into agent, gets executed once at agent launch
 *
 */

module goaldiggerInit {

	if true then insert ( stepAwaitingAction(true)). % first action awaits percept
	if true then insert ( step(-1)). % init server steps
	if true then insert (agentAt(0,0)). % agent starting coordinate
	if true then insert (haveMove(true)). % Semaphore of decision for step
	if bel(randomDirection(X)) then insert (randomAffinity(X)). % random general direction to explore for agent
	if bel(randomChangeStep(X)) then insert (changeAffinityAfterTheseSteps(X)). %
	if true then insert (elapseStepTime(0)). % Time measurement between step
	if true then insert (lDebugOn(true)). % Variable für Debug, zB elapseStepTime
	if true then insert (executeManhattan(false)). % init switch Manhatten Distance
	if true then insert (targetMd(-700, -700)). % init Manhatten Distance 
	if true then insert (nMd(0)). % ManhattanDistance for field north of agent
	if true then insert (sMd(0)). % ManhattanDistance for field south of agent
	if true then insert (eMd(0)). % ManhattanDistance for field east of agent
	if true then insert (wMd(0)). % ManhattanDistance for field west of agent
	if true then insert (haveBlockAttached(false, n)). % switch for carried blocks
	if true then insert (haveDispenserDelivery(false, 0)). % switch for successful dispenser request
	if true then insert (skipThisStep(-2)). %	
	
}