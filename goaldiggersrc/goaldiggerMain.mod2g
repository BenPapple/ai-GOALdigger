use goaldiggerProlog as knowledge.
use goaldiggerAction as actionspec.
use "pathfinding/manhattanExecuteMove" as module.
use "pathfinding/randomExecuteMove" as module.
use "blockhandling/rotateBlock" as module.
use "taskhandling/handleTaskSubmit" as module.

exit=never.

/**
 * Macro definitions
 *
 */
 

/**
 * Main decision rules
 *
 */
 
module goaldiggerMain {

	% Server sends new percept and Event sets haveMove(false) and now agent action strategy can continue
    if bel(haveMove(false)) then {
    
    	% handle deactivated by skip
    	if percept(deactivated(true)) then skip + delete(haveMove(false)) + insert(haveMove(true)).
    
    	% skip turn number skipThisStep
    	if percept(step(Step)), bel(skipThisStep(SkipStep), SkipStep == Step) then skip + delete(haveMove(false)) + insert(haveMove(true)).
    	
    	% if oppurtunity arises adapt worker role until complex role module ready
    	if percept(role(default), roleZone(0, 0)), bel(executeManhattan(true)) then adapt(worker) + delete(haveMove(false)) + insert(haveMove(true)) + delete(executeManhattan(true)) + insert(executeManhattan(false)). 
    
    	% submit task if in goal zone with block and corresponding task available
    	if percept(task(_,Step,_,[req(_,_,b0)]), goalZone(0,0)), bel(haveBlockAttached(true, _), step(SimStep), Step >= SimStep) then handleTaskSubmit.
    	
    	% Movement according to Manhatten Distance
	    if bel(executeManhattan(true)) then manhattanExecuteMove.
    
   		% actions while having block attached
    	if bel(haveBlockAttached(true, DirBlock)) then {
    
    		% rotate block behind agent direction affinity
    		if  bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), percept(thing(A, B, block, _)), bel(randomAffinity(Dir), oppositeDirection(Dir, OppoDir), DirBlock \== OppoDir) 
    		then rotateBlock.
    
    		% if block behind agent concerning affinity direction move forward
    		if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), percept(thing(A, B, block, _)), bel(randomAffinity(Dir), oppositeDirection(Dir, Dir3), Dir3 == DirBlock) 
    		then randomExecuteMove.  
    
    		} % if bel(haveBlockAttached(true, DirBlock))	    
	    
	    % execute random explorer move with affinity to one direction
		if bel(haveBlockAttached(false,_)) then randomExecuteMove. 
	
   		% if no move decision skip and prepare idle mode
		if bel(haveMove(false)) then skip + delete(haveMove(false)) + insert(haveMove(true)).
	    
    } % if bel(haveMove(false))
	
} % module