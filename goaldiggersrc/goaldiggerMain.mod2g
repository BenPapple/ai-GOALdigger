use goaldiggerProlog as knowledge.
use goaldiggerAction as actionspec.
use "pathfinding/manhattanExecuteMove" as module.
use "pathfinding/randomExecuteMove" as module.
use "blockhandling/rotateBlock" as module.
use "taskhandling/handleTaskSubmit" as module.
use "taskhandling/chooseTask" as module.
use "pathfinding/stepAndRequestAroundDispenser" as module.
use "./actionhandling/postActionCleanup" as module.
use "./rolehandling/defaultRole" as module.
use "./rolehandling/roleWorker" as module.

exit=never.

/**
 * Macro definitions
 *
 */
 
/**
 * Main decision rules for every step server sends
 *
 */
 
module goaldiggerMain {

	% Server sends new percept and Event sets haveMove(false) and now agent action strategy can continue
    if not(bel(haveMove)) then {
    
    	% handle deactivated by skip
    	if percept(deactivated(true)) then postActionCleanup + skip.
    
    	% agents want to be free randomExploreMove / skip turn number skipThisStep    	
    	if percept(step(Step)), bel(skipThisStep(SkipStep), Step =< SkipStep) then randomExecuteMove.
    	
	    /**
		 * Handle DEFAULT role
		 *
		 */
    	if percept(role(default)) then defaultRole.

	    /**
		 * Handle WORKER role
		 *
		 */
    	if percept(role(worker)) then roleWorker.
    
    } % if bel(haveMove(false))
	
} % module