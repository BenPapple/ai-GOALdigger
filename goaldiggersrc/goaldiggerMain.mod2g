use goaldiggerProlog as knowledge.
use goaldiggerAction as actionspec.
use "pathfinding/executeRandomMove" as module.
use "./actionhandling/postActionCleanup" as module.
use "./rolehandling/executeDefaultRole" as module.
use "./rolehandling/executeWorkerRole" as module.

exit=never.

/**
 * Main decision rules for every step server sends
 *
 */
 
module goaldiggerMain {

	% Server sends new percept and Event sets haveMove(false) and now agent action strategy can continue
    if not(bel(haveMove)) then {
    
    	% handle deactivated by skip
    	if percept(deactivated(true)) then postActionCleanup + skip.
    
    	% agents want to be free randomExploreMove for turn number skipThisStep    	
    	if percept(step(SimStep)), bel(skipThisStep(SkipStep), SimStep =< SkipStep) then executeRandomMove.
    	
	    /**
		 * Handle DEFAULT role
		 *
		 */
    	if percept(role(default)) then executeDefaultRole.

	    /**
		 * Handle WORKER role
		 *
		 */
    	if percept(role(worker)) then executeWorkerRole.
    
    } % if haveMove
	
} % module