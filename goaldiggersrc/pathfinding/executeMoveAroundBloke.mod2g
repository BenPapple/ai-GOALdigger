use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "executeRandomMove" as module.
use "../actionhandling/preActionCleanup" as module.

/**
 * Handling movement, attaching and requesting when agent around dispenser
 *
 */

module executeMoveAroundBloke {	

	% go random explore when current task expired
	%if percept(step(SimStep), role(worker)), bel(haveBlockAttached(false, _), 
	% currentChosenTask(_, TaskStep, _, _, _, _,_,_), TaskStep < SimStep) then executeRandomMove.


	% Bloke attaching if in position
	if  bel(attachedBlokes(Count), targetBlokeCount(Target), Count < Target, whitelistedTeam(MyTeam)),
	    percept(thing(A, B, entity, OtherTeam), MyTeam \= OtherTeam, abs(A) =< 1, abs(B) =< 1),
	    bel(XPlusY is abs(A) + abs(B), XPlusY \= 0), 
	    not(percept(attached(A,B))) then {
	
		if bel(A =:= 1, B =:= 0), not(percept(attached(1, 0))) 
		    then preActionCleanup + attach(e).
		if bel(A =:= -1, B =:= 0), not(percept(attached(-1, 0))) 
		    then preActionCleanup + attach(w).
		if bel(A =:= 0, B =:= -1), not(percept(attached(0, -1))) 
		    then preActionCleanup + attach(n).
		if bel(A =:= 0, B =:= 1), not(percept(attached(0, 1))) 
		    then preActionCleanup + attach(s).
	
	}
	% obligatory random/skip.
	%if true then preActionCleanup + executeRandomMove.
	
} % module