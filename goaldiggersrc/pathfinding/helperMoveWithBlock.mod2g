use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../actionhandling/preActionCleanup" as module.
use "./helperMoveWithoutBlock" as module.
use "../blockhandling/rotateBlockAgainstAffinity" as module.
use "../pathfinding/executeRandomMove" as module.
use "./helperMoveOrClearForward" as module.

order = linearrandom. % random choice between equal values requires random; linearrandom: first action choice linear, then inside curly brackets random action

/**
 * handle moving with block
 *
 */

module helperMoveWithBlock {

	% rotate block behind agent direction affinity
	if  bel(directionToCoordinate(DirBlock, A, B)), percept(thing(A, B, block, _)), bel(randomAffinity(Dir), oppositeDirection(Dir, OppoDir), 
		DirBlock \== OppoDir) then rotateBlockAgainstAffinity.

    % random 90 degree move if blocked Obstacle main direction, checking free fields for agent and attached block 
    if bel(randomAffinity(Diry), directionToCoordinate(Diry, Xn, Yn), random90Direction(Diry, AltMove)) then {
    	if  bel( directionToCoordinate(AltMove, Xm, Ym), diagonalCoordForAffiAndOppoBlock(Diry,AltMove,A,B)), not(percept(thing(Xm, Ym, Type,_), Type \== dispenser)), 
    		not(percept(thing(A, B, Type,_), Type \== dispenser)) then {
    		
	    		if percept(thing(Xn, Yn, entity,_)) then preActionCleanup + move(AltMove).
	    		if percept(thing(Xn, Yn, block,_)), percept(attached(Xn, Yn)) then preActionCleanup + move(AltMove).
	    		
        }
        if  bel(oppositeDirection(AltMove, AltAltMove), directionToCoordinate(AltAltMove, Xm, Ym), diagonalCoordForAffiAndOppoBlock(Diry,AltAltMove,A,B)), not(percept(thing(Xm, Ym, Type,_), Type \== dispenser)), 
        	not(percept(thing(A, B, Type,_), Type \== dispenser)) then {
        	
	    		if percept(thing(Xn, Yn, entity,_)) then preActionCleanup + move(AltAltMove).
	    		if percept(thing(Xn, Yn, block,_)), percept(attached(Xn, Yn)) then preActionCleanup + move(AltAltMove).
	    		
        }
    } % random 90 degree

	%  move into affinity direction
	if  bel(haveBlockAttached(true, _)) then helperMoveOrClearForward.
	
} % end module