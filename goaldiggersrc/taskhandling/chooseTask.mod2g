use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../taskhandling/taskHandlingOneBlock" as module.
use "../taskhandling/taskHandlingTwoBlock" as module.
use "../taskhandling/taskHandlingThreeBlock" as module.
use "../taskhandling/taskHandlingFourBlock" as module.
use "../taskhandling/manageQtable" as module.
use "../taskhandling/preferTwoTask" as module.
use "../taskhandling/preferThreeTask" as module.
use "../taskhandling/preferFourTask" as module.

/**
 * Choose task from options when having corresponding role; waterfall chosing, advanced choices come first in file: 
 * first true fit gets chosen and exits module
 *
 * @author Ben G.
 */

module chooseTask {

	% set switch to drop blocks if blocks connected
	if bel(multiTaskSupporterStatus(_, _, _, _, _, _, Connect1, _, _, _, _, _, Connect2, _, _, _, _, _, Connect3)) 
		then {
		if bel(Connect1 == connected),
		   not(bel(dropAllBlocks)) then insert(dropAllBlocks).
		if bel(Connect2 == connected),
		   not(bel(dropAllBlocks)) then insert(dropAllBlocks).		
		if bel(Connect3 == connected),
		   not(bel(dropAllBlocks)) then insert(dropAllBlocks).		
		
	}	                                

    % reset supporter status for multitask
	if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, 
	                                W19)) 
        then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, 
                                             W18, W19)) +
             insert(multiTaskSupporterStatus(noTask, placeholder, placeholder, placeholder, placeholder, placeholder, 
                                             placeholder, placeholder, placeholder, placeholder, placeholder,
                                             placeholder, placeholder, placeholder, placeholder, placeholder, 
                                             placeholder, placeholder, placeholder)).

	% as supportingAgent remove supporter task 
	if percept(step(SimStep)),
	   not(percept(task(_ ,TaskStep, 10,[req(_,_,_)]), TaskStep >= SimStep)), 
	   not(bel(submitterLeader))	   
		then { 
		if bel(currentChosenTask(V1, TaskStep, V3, V4, V5, V6, V7, V8), TaskStep < SimStep) 
				then delete(currentChosenTask(V1, TaskStep, V3, V4, V5, V6, V7, V8)) +
		    		 insert(currentChosenTask(noName, -1, 10, 1, 1, noBlock, noClientServer, noTaskSubmitter)).
		%if true then exit-module.
    }

	% choose 1s task if one is available and not believe submitterLeader
	if percept(task(_ ,TaskStep, 10,[req(_,_,_)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 20),
	   not(bel(submitterLeader))
		then taskHandlingOneBlock + exit-module.

    % create random for ML task choser

    % set waiting period after submit
    if percept(lastAction(submit)),
       bel(submitterLeader),
       bel(waitBeforeNewTask(Del))
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(3)).
        
    % reduce waiting period 
    if bel(submitterLeader),
       bel(waitBeforeNewTask(Del), Del > 0),
       bel(NewVal is Del - 1)
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(NewVal)).        

    % ML task chosing		
	if bel(submitterLeader),
	   bel(waitBeforeNewTask(0)),
	   bel(randomBetween(0, 100, RandOut)),
	   bel(qtable(V1,V2,_,_,_,_))
	    then {
	    if bel(RandOut =< V1) then preferTwoTask + exit-module.
	    if  bel(Q2 is  V1 + V2),
	        bel(RandOut =< Q2) then preferThreeTask + exit-module.
	    if true then preferFourTask.	    
	}
		
} % module
