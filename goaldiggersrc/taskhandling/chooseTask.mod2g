use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../taskhandling/taskHandlingOneBlock" as module.
use "../taskhandling/taskHandlingTwoBlock" as module.
use "../eventsubmodules/updateDispenserData" as module.

/**
 * Choose task from options when having corresponding role; waterfall chosing, advanced choices come first in file: 
 * first true fit gets chosen and exits module
 *
 */

module chooseTask {

	% chose 1s task if one is available and not believe submitterLeader
	if percept(task(_ ,TaskStep, 10,[req(_,_,_)])), bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 0),
	   not(bel(submitterLeader))
		then taskHandlingOneBlock.
		 
	% chose 2-task as submitterLeader if available
	if bel(submitterLeader, step(SimStep)),
	   bel(confirmedOtherAgentAt(_, _, _)),
	   percept(task(_ ,TaskStep, 40,[req(_,_,_),req(_,_,_)])), 
	   bel(step(SimStep), TaskStep > SimStep, TaskStep - SimStep >= 70)  
	    then taskHandlingTwoBlock.
	    
	% chose 1-task as submitterLeader if no confirmedOtherAgentAt known
	if bel(submitterLeader, step(SimStep)),
	   not(bel(confirmedOtherAgentAt(_, _, _))),
	   percept(task(_ ,TaskStep, 10,[req(_,_,_)]), TaskStep > SimStep)
	   	then taskHandlingOneBlock.
	    
	% chose 1-task as submitterLeader if 2task not available
	if bel(submitterLeader, step(SimStep)), 
	   not(percept(task(_ ,TaskStep, 40,[req(_,_,_),req(_,_,_)]), TaskStep >= SimStep)) 
	    then taskHandlingOneBlock.
	
	% update dispenser distance as submitterLeader
	%if bel(currentChosenTask(_, _, _, _, _, _, submittingAgentTwoTask, supporterPending)) then updateDispenserData. 
		
} % module
