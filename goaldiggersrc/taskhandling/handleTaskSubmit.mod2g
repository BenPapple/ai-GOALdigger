use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../pathfinding/executeRandomMove" as module.
use "../actionhandling/preActionCleanup" as module.
use "../blockhandling/rotateBlockToSouth" as module.
use "../blockhandling/connectBlocks" as module.

% ToDo Hack linearrandom so connect and submit changes randomly instead of recognizing connect, do that later
order = linearrandom.

/**
 * Rotate logic clearing block/obstacles at rotate target and then rotates prefering south, if block south submit action
 *
 */

module handleTaskSubmit {

    % submit 1-task if block is south of agent
    if bel(haveBlockAttached(true, DirBlock), DirBlock == s),
       bel(currentChosenTask(TaskFit, _, _, _, _, _, submittingAgentOneTask, _)) 
        then preActionCleanup + submit(TaskFit).

	% submit 2-task if block is south of agent
	if bel(currentChosenTask(TaskFit, TaskStep, _, _, _, _, submittingAgentTwoTask, _)), 
	   bel(step(SimStep), TaskStep >= SimStep), bel(haveBlockAttached(true, DirBlock), DirBlock == s) then {		
			
			% submit after succesful connect
			if percept(lastActionResult(success), lastAction(connect)) then preActionCleanup + submit(TaskFit)
			                                                                + print("Agent made 40 Points!!!!").
			
			% try to connect blocks
			if true then connectBlocks.
    	    	
    } 

	% prefer rotate to south position and clear route to it if necessary
    if true then rotateBlockToSouth.
	
	% obligatory skip/executeRandomMove
	if true then skip.  
		
} % module