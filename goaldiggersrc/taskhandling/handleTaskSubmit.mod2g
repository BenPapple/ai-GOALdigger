use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../pathfinding/randomExecuteMove" as module.

/**
 * Rotate logic clearing block/obstacles at rotate target and then rotates
 *
 */

module handleTaskSubmit {

	% rotate block according to task or submit task if block position as requested
	if percept(task(_,Step,_,[req(_,_,b0)])), bel(step(SimStep), Step >= SimStep) then {
		
		% preconditions for submit achieved, submit task	
    	if percept(attached(V, W), task(TaskFit,Step,_,[req(V, W, b0)])), bel(step(SimStep), Step >= SimStep) then submit(TaskFit) + delete(haveMove(false)) + insert(haveMove(true)).
    	    	
    	% rotate block to fit task, clear if necessary
    	if bel(haveBlockAttached(true, DirBlock), randomRotate(RandRot), rotateToCoord(DirBlock, RandRot, A, B)) then {
    	
	    	if not(percept(thing(A, B, obstacle, _))), not(percept(thing(A, B, block, _))), not(percept(thing(A, B, entity, _))) then rotate(RandRot) + delete(haveMove(false)) + insert(haveMove(true)).
	    	if percept(thing(A, B, obstacle, _)) then clear(A, B) + delete(haveMove(false)) + insert(haveMove(true)).
			if percept(thing(A, B, block, _)) then clear(A, B) + delete(haveMove(false)) + insert(haveMove(true)).
    	
    	}
    	
    } % if percept(task(Task,_,_,[req(X,Y,b0)]))
    
    % obligatory skip/randomExecuteMove
	if true then randomExecuteMove + delete(haveMove(false)) + insert(haveMove(true)).  
		
} % module