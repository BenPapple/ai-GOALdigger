use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../eventsubmodules/updateDispenserDistance" as module.

/**
 * Use the 2-task as 2task submitterLeader
 *
 */

module taskHandlingThreeBlock {

    % reset supporter status for multitask
	if bel(multiTaskSupporterStatus(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16)) 
        then delete(multiTaskSupporterStatus(V1, V2, V3, V4, V5, V6, V7, V8, V9, V10, V11, V12, V13, V14, V15, V16)) +
             insert(multiTaskSupporterStatus(noTask, placeholder, placeholder, placeholder, placeholder, placeholder, 
                                             placeholder, placeholder, placeholder, placeholder, placeholder,
                                             placeholder, placeholder, placeholder, placeholder, placeholder)).

	% choose 2-block tasks if own block fits LEFT req fields
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
	   percept(thing(A, B, block, BlockTypeAttached)),
	   percept(task(TaskName ,TaskStep, 90,[req(0, 1, BlockTypeAttached),req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 60),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _)) 
	    then {	
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).	
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockTypeAttached, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task own Block fits") + 
				     exit-module.
	}

	% choose 2-block tasks if own block fits MIDDLE req fields
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
	   percept(thing(A, B, block, BlockTypeAttached)),
	   percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(0, 1, BlockTypeAttached),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 60),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _)) 
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockTypeAttached, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task own Block fits") + 
				     exit-module.
	}
	
	% choose 2-block tasks if own block fits RIGHT req fields
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
	   percept(thing(A, B, block, BlockTypeAttached)),
	   percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2),req(0, 1, BlockTypeAttached)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 60),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _)) 
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockTypeAttached, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task own Block fits") + 
				     exit-module.
	}

	% update dispenser distance as submitterLeader
	if not(bel(calculateNewDispenserMD)) 
		then updateDispenserDistance.
	
	% choose 2-block tasks if it exists and nearestdispenser with right block LEFT req
	if percept(task(TaskName ,TaskStep, 90,[req(0, 1, BlockType),req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 70),
	   bel(targetClosestOfAllDispensersAt(_, _, BlockType, _), BlockType \= bx),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task nearestDispenser") + 
				     exit-module.
	}

	% choose 2-block tasks if it exists and nearestdispenser with right block MIDDLE req
	if percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(0, 1, BlockType),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 70),
	   bel(targetClosestOfAllDispensersAt(_, _, BlockType, _), BlockType \= bx),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task nearestDispenser") + 
				     exit-module.
	}
	
	% choose 2-block tasks if it exists and nearestdispenser with right block RIGHT req
	if percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2),req(0, 1, BlockType)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 70),
	   bel(targetClosestOfAllDispensersAt(_, _, BlockType, _), BlockType \= bx),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task nearestDispenser") + 
				     exit-module.
	}

	% choose 2-block tasks if it exists and currenttask dispenser LEFT req
	if percept(task(TaskName ,TaskStep, 90,[req(0, 1, BlockType),req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 90),
	   bel(targetDispenserAt(_, _, BlockType, _), BlockType \= bx),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				       supporterREQPending)) + 
				     print("ModuleChoseTask 3task OldTask nearestDispenser") + 
					 exit-module.
	}

	% choose 2-block tasks if it exists and currenttask dispenser MIDDLE req
	if percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(0, 1, BlockType),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 90),
	   bel(targetDispenserAt(_, _, BlockType, _), BlockType \= bx),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task OldTask nearestDispenser") + 
				     exit-module.
	}
	
	% choose 2-block tasks if it exists and currenttask dispenser RIGHT req
	if percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2),req(0, 1, BlockType)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 90),
	   bel(targetDispenserAt(_, _, BlockType, _), BlockType \= bx),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task OldTask nearestDispenser") + 
				     exit-module.
	}

	% choose 2-block tasks if it exists and both dispensers known LEFT req
	if percept(task(TaskName ,TaskStep, 90,[req(0, 1, BlockType),req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 110),
	   bel(mapDispenser(_, _, dispenser, BlockType, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task basic disp known") + 
				     exit-module.
	} 	

	% choose 2-block tasks if it exists and both dispensers known MIDDLE req
	if percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(0, 1, BlockType),req(_, _, BlockTypeOther2)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 110),
	   bel(mapDispenser(_, _, dispenser, BlockType, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
					 insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task basic disp known") + 
				     exit-module.
	} 

	% choose 2-block tasks if it exists and both dispensers known RIGHT req
	if percept(task(TaskName ,TaskStep, 90,[req(_, _, BlockTypeOther),req(_, _, BlockTypeOther2),req(0, 1, BlockType)])), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 110),
	   bel(mapDispenser(_, _, dispenser, BlockType, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
	   bel(mapDispenser(_, _, dispenser, BlockTypeOther2, _, _))
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
					 insert(currentChosenTask(TaskName, TaskStep, 90, 0, 1, BlockType, submittingAgentThreeTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 3task basic disp known") + 
				     exit-module.
	} 
	
} % end module