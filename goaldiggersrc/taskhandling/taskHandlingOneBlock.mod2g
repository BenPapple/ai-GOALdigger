use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../eventsubmodules/distancecalc/updateDispenserDistance" as module.

/**
 * Choose 1-block task
 *
 * @author Ben G.
 */

module taskHandlingOneBlock {

    % SUBMODULE update dispenser map data as worker with no block and as worker with no active task
	if not(bel(calculateNewDispenserMD)) 	
		then updateDispenserDistance.

	% chose task if your attached block fits task	
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
	   percept(thing(A, B, block, BlockTypeAttached)), 
	   percept(task(TaskName ,TaskStep, 10,[req(Xt,Yt,BlockTypeAttached)])),
	   bel(limitStepsTask(Task1Limit, _, _, _)),
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task1Limit - 12) 
	   	then {
			if not(bel(calculateNewGoalzoneMD)) 
				then insert(calculateNewGoalzoneMD).
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) +
		    		 insert(currentChosenTask(TaskName, TaskStep, 10, Xt, Yt, BlockTypeAttached, submittingAgentOneTask, 
		                    oneTaskSubmitter)) +
		      		 exit-module.
	} % if
	
	% choose/change 1-block tasks if closest dispenser has fitting block
	if bel(targetClosestOfAllDispensersAt(_, _, BlockType, _), BlockType \== bx), 
	   percept(task(TaskName ,TaskStep, 10,[req(X,Y,BlockType)])),
	   bel(limitStepsTask(Task1Limit, _, _, _)),  
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task1Limit) 
	   	then {
	    	if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
	    		then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
	        		 insert(currentChosenTask(TaskName, TaskStep, 10, X, Y, BlockType, submittingAgentOneTask, 
	        		        oneTaskSubmitter)) + 
	        		 exit-module.
	} % if
	
	% choose 1-block tasks of target Dispenser concerning currenttaskBlockType+targetDispenserAt calc in EventModule
	if bel(targetDispenserAt(_, _, BlockType, _), BlockType \== bx), 
	   percept(task(TaskName ,TaskStep, 10,[req(X,Y,BlockType)])),
	   bel(limitStepsTask(Task1Limit, _, _, _)),  
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task1Limit)
	    then {
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
		    		 insert(currentChosenTask(TaskName, TaskStep, 10, X, Y, BlockType, 
		    		        submittingAgentOneTask, oneTaskSubmitter)) +
		     		 exit-module.
	} % if
	
	% choose 1-block tasks if random known dispenser has fitting block
	if percept(task(TaskName ,TaskStep, 10,[req(Xt,Yt,BlockType)])),  
	   bel(mapDispenser(_, _, dispenser, BlockType, _, _)),
	   bel(limitStepsTask(Task1Limit, _, _, _)),	    
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task1Limit + 10) 
	   	then {
		    if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
		    	then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
	                 insert(currentChosenTask(TaskName, TaskStep, 10, Xt, Yt, BlockType, submittingAgentOneTask, 
	                        oneTaskSubmitter)) +
	         		 exit-module.
	} % if

%	% choose 1-block tasks if it exists
%	if percept(task(TaskName ,TaskStep, 10,[req(Xt,Yt,BlockType)])), 
%	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= 40) 
%	   	then {
%			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
%				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
%		    	 	 insert(currentChosenTask(TaskName, TaskStep, 10, Xt, Yt, BlockType, submittingAgentOneTask, 
%		           		    oneTaskSubmitter)) +
%		    		 print("ModuleChoseTask 1task Just Any Taks Fit") +
%		     		 exit-module.
%	} % if	
	
} % end module