use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../taskhandling/chooseTask" as module.

/**
 * Check if task can be changed
 *
 * @author Ben G.
 */

module changeTaskCheck {

	% recognize failed multitask missing from percept and send message
	if bel(currentChosenTask(TaskName, V2, 40, V4, V5, V6, V7, V8)),
	   bel(submitterLeader),
	   not(percept(lastAction(submit))),
	   not(percept(task(TaskName , _, 40,[req(_,_,_),req(_,_,_)]))),
	   percept(name(MyName))
	    then delete(currentChosenTask(TaskName, V2, 40, V4, V5, V6, V7, V8)) +
	          insert(currentChosenTask(TaskName, V2, 999, V4, V5, V6, V7, V8)) + 
	          all.send(failed40pointtask(MyName)).
	if bel(currentChosenTask(TaskName, V2, 90, V4, V5, V6, V7, V8)),
	   not(percept(lastAction(submit))),
	   bel(submitterLeader),
	   not(percept(task(TaskName , _, 90,[req(_,_,_),req(_,_,_),req(_,_,_)]))),
	   percept(name(MyName))
	    then  delete(currentChosenTask(TaskName, V2, 90, V4, V5, V6, V7, V8)) +
	          insert(currentChosenTask(TaskName, V2, 999, V4, V5, V6, V7, V8)) + 
	          all.send(failed90pointtask(MyName)).
	if bel(currentChosenTask(TaskName, V2, 160, V4, V5, V6, V7, V8)),
	   not(percept(lastAction(submit))),
	   bel(submitterLeader),	   
	   not(percept(task(TaskName , _, 160,[req(_,_,_),req(_,_,_),req(_,_,_),req(_,_,_)]))),
	   percept(name(MyName))
	    then  delete(currentChosenTask(TaskName, V2, 160, V4, V5, V6, V7, V8)) +
	          insert(currentChosenTask(TaskName, V2, 999, V4, V5, V6, V7, V8)) + 
	          all.send(failed160pointtask(MyName)).

	% recognize failed multitask by expired tasksteps and send message
	if bel(currentChosenTask(_, TaskStep, 40, _, _, _,_,_)),
	   bel(submitterLeader),
	   not(percept(lastAction(submit))),
	   percept(name(MyName), step(SimStep)),
	   bel(TaskStep > 2, TaskStep == SimStep - 1)
	    then all.send(failed40pointtask(MyName)).
	if bel(currentChosenTask(_, TaskStep, 90, _, _, _,_,_)),
	   bel(submitterLeader),
	   not(percept(lastAction(submit))),
	   percept(name(MyName), step(SimStep)),
	   bel(TaskStep > 2, TaskStep == SimStep - 1)
	    then all.send(failed90pointtask(MyName)).
	if bel(currentChosenTask(_, TaskStep, 160, _, _, _,_,_)),
	   bel(submitterLeader),
	   not(percept(lastAction(submit))),
	   percept(name(MyName), step(SimStep)),
	   bel(TaskStep > 2, TaskStep == SimStep - 1)
	    then all.send(failed160pointtask(MyName)).


    % reset waiting period for new task as submitterLeader when task has 0 steps left
    if percept(step(SimStep)),
       bel(currentChosenTask(_, TaskStep, _, _, _, _, _, _), TaskStep == SimStep),
       bel(submitterLeader),
       bel(waitBeforeNewTask(Del))
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(3)).
        
	% reset waiting period for new task as submitterLeader when task disappears
    if percept(step(SimStep)),
       bel(currentChosenTask(TaskName, TaskStep, 10, _, _, _, _, _), TaskStep >= SimStep),
       not(percept(task(TaskName , _, 10,[req(_,_,_)]))),
       bel(submitterLeader),
       bel(waitBeforeNewTask(Del))
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(3)).
    if percept(step(SimStep)),
       bel(currentChosenTask(TaskName, TaskStep, 40, _, _, _, _, _), TaskStep >= SimStep),
       not(percept(task(TaskName , _, 40,[req(_,_,_),req(_,_,_)]))),
       bel(submitterLeader),
       bel(waitBeforeNewTask(Del))
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(3)).
    if percept(step(SimStep)),
       bel(currentChosenTask(TaskName, TaskStep, 90, _, _, _, _, _), TaskStep >= SimStep),
       not(percept(task(TaskName , _, 90,[req(_,_,_),req(_,_,_),req(_,_,_)]))),
       bel(submitterLeader),
       bel(waitBeforeNewTask(Del))
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(3)).
    if percept(step(SimStep)),
       bel(currentChosenTask(TaskName, TaskStep, 160, _, _, _, _, _), TaskStep >= SimStep),
       not(percept(task(TaskName , _, 160,[req(_,_,_),req(_,_,_),req(_,_,_),req(_,_,_)]))),
       bel(submitterLeader),
       bel(waitBeforeNewTask(Del))
        then delete(waitBeforeNewTask(Del)) + insert(waitBeforeNewTask(3)).
                        	
	% as worker change task when task expired or initial task has negative steps
	if percept(step(SimStep)), 
	   bel(currentChosenTask(_, TaskStep, _, _, _, _,_,_), TaskStep < SimStep) 
	    then chooseTask.
	    
	% change task when chosen task not in percept anymore
	if bel(currentChosenTask(TaskName, _, 10, _, _, _,_,_)),
	   not(percept(task(TaskName , _, 10,[req(_,_,_)])))
	    then chooseTask.
	if bel(currentChosenTask(TaskName, _, 40, _, _, _,_,_)),
	   not(percept(task(TaskName , _, 40,[req(_,_,_),req(_,_,_)])))
	    then chooseTask.
	if bel(currentChosenTask(TaskName, _, 90, _, _, _,_,_)),
	   not(percept(task(TaskName , _, 90,[req(_,_,_),req(_,_,_),req(_,_,_)])))
	    then chooseTask.
	if bel(currentChosenTask(TaskName, _, 160, _, _, _,_,_)),
	   not(percept(task(TaskName , _, 160,[req(_,_,_),req(_,_,_),req(_,_,_),req(_,_,_)])))
	    then chooseTask.	    

	% change from 1-task to 4-task as submitterLeader
	if bel(submitterLeader),
	   percept(step(SimStep)),
	   bel(limitStepsTask(_, _, _, Task4Limit)), 
	   bel(currentChosenTask(_, TaskStep, 10, _, _, _,_,_), TaskStep > SimStep),
	   bel(confirmedOffsetOfAgent(_, _, OtherAgent1)),
       bel(confirmedOffsetOfAgent(_, _, OtherAgent2), OtherAgent1 \= OtherAgent2),
       bel(confirmedOffsetOfAgent(_, _, OtherAgent3), OtherAgent3 \= OtherAgent1, OtherAgent3 \= OtherAgent2),
       bel(storedOtherAgentStatus(OtherAgent1, _, worker, _, _, _, _, _, freeWorkerAgent)),
       bel(storedOtherAgentStatus(OtherAgent2, _, worker, _, _, _, _, _, freeWorkerAgent)),  
       bel(storedOtherAgentStatus(OtherAgent3, _, worker, _, _, _, _, _, freeWorkerAgent)),          	   
	   percept(task(_ ,TaskStep2, 160,[req(_,_,Block1),req(_,_,Block2),req(_,_,Block3),req(_,_,Block4)]), 
	           TaskStep2 > SimStep, TaskStep2 - SimStep >= Task4Limit),
	   bel(mapDispenser(_, _, dispenser, Block1, _, _)),
	   bel(mapDispenser(_, _, dispenser, Block2, _, _)),
	   bel(mapDispenser(_, _, dispenser, Block3, _, _)),
	   bel(mapDispenser(_, _, dispenser, Block4, _, _))
	    then chooseTask.  
	    	    
	% change from 1-task to 3-task as submitterLeader
	if bel(submitterLeader),
	   percept(step(SimStep)), 
	   bel(limitStepsTask(_, _, Task3Limit, _)),
	   bel(currentChosenTask(_, TaskStep, 10, _, _, _,_,_), TaskStep > SimStep),
	   bel(confirmedOffsetOfAgent(_, _, OtherAgent1)),
       bel(confirmedOffsetOfAgent(_, _, OtherAgent2), OtherAgent1 \= OtherAgent2),
       bel(storedOtherAgentStatus(OtherAgent1, _, worker, _, _, _, _, _, freeWorkerAgent)),
       bel(storedOtherAgentStatus(OtherAgent2, _, worker, _, _, _, _, _, freeWorkerAgent)),           	   
	   percept(task(_ ,TaskStep2, 90,[req(_,_,Block1),req(_,_,Block2),req(_,_,Block3)]), 
	           TaskStep2 > SimStep, TaskStep2 - SimStep >= Task3Limit),
	   bel(mapDispenser(_, _, dispenser, Block1, _, _)),
	   bel(mapDispenser(_, _, dispenser, Block2, _, _)),
	   bel(mapDispenser(_, _, dispenser, Block3, _, _))
	    then chooseTask.    
    
	% change from 1-task to 2-task as submitterLeader
	if bel(submitterLeader, confirmedOffsetOfAgent(_, _, OtherAgent1)),
	   bel(limitStepsTask(_, Task2Limit, _, _)),	
	   bel(storedOtherAgentStatus(OtherAgent1, _, worker, _, _, _, _, _, freeWorkerAgent)),
	   percept(step(SimStep)), 
	   bel(currentChosenTask(_, TaskStep, 10, _, _, _,_,_), TaskStep > SimStep),
	   percept(task(_ ,TaskStep2, 40,[req(_,_,Block1),req(_,_,Block2)]), 
	           TaskStep2 > SimStep, TaskStep2 - SimStep >= Task2Limit),
	   bel(mapDispenser(_, _, dispenser, Block1, _, _)),
       bel(mapDispenser(_, _, dispenser, Block2, _, _))
	    then chooseTask.   
    	    
}