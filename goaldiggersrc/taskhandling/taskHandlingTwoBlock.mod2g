use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../eventsubmodules/distancecalc/updateDispenserDistance" as module.

/**
 * Use the 2-task as 2task submitterLeader
 *
 * @author Ben G.
 */

% MACRO
define checkAvailableAgentsAndDispensers(BlockTypeOther) as  
    bel(mapDispenser(_, _, dispenser, BlockTypeOther, _, _)),
    bel(storedOtherAgentStatus(OtherAgent1, _, worker, _, _, _, _, _, freeWorkerAgent)),
	bel(confirmedOffsetOfAgent(_, _, OtherAgent1)).

module taskHandlingTwoBlock {

    % reset supporter status for multitask
	if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18, 
	                                W19)) 
        then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17,
                                             W18, W19)) +
             insert(multiTaskSupporterStatus(noTask, placeholder, placeholder, placeholder, placeholder, placeholder, 
                                             placeholder, placeholder, placeholder, placeholder, placeholder,
                                             placeholder, placeholder, placeholder, placeholder, placeholder, 
                                             placeholder, placeholder, placeholder)).

	% choose 2-block tasks if own block fits left req fields
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
	   percept(thing(A, B, block, BlockTypeAttached)),
	   percept(task(TaskName ,TaskStep, 40,[req(0, 1, BlockTypeAttached),req(_, _, BlockTypeOther)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)),	    
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {	
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).	
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockTypeAttached, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task own Block fits on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	}
	
	% choose 2-block tasks if own block fits right req fields
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
	   percept(thing(A, B, block, BlockTypeAttached)),
	   percept(task(TaskName ,TaskStep, 40,[req(_, _, BlockTypeOther),req(0, 1, BlockTypeAttached)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)),
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   checkAvailableAgentsAndDispensers(BlockTypeOther) 
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockTypeAttached, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task own Block fits on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	}

	% update dispenser distance as submitterLeader
	if not(bel(calculateNewDispenserMD)) 
		then updateDispenserDistance.
	
	% choose 2-block tasks if it exists and nearestdispenser with right block left req
	if percept(task(TaskName ,TaskStep, 40,[req(0, 1, BlockType),req(_, _, BlockTypeOther)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   bel(targetClosestOfAllDispensersAt(_, _, BlockType, _), BlockType \= bx),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockType, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task nearestDispenser on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	}
	
	% choose 2-block tasks if it exists and nearestdispenser with right block right req
	if percept(task(TaskName ,TaskStep, 40,[req(_, _, BlockTypeOther),req(0, 1, BlockType)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   bel(targetClosestOfAllDispensersAt(_, _, BlockType, _), BlockType \= bx),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockType, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task nearestDispenser on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	}

	% choose 2-block tasks if it exists and currenttask dispenser left req
	if percept(task(TaskName ,TaskStep, 40,[req(0, 1, BlockType),req(_, _, BlockTypeOther)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   bel(targetDispenserAt(_, _, BlockType, _), BlockType \= bx),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockType, submittingAgentTwoTask, 
				       supporterREQPending)) + 
				     print("ModuleChoseTask 2task OldTask nearestDispenser on step "+SimStep+" till "+TaskStep) + 
					 exit-module.
	}
	
	% choose 2-block tasks if it exists and currenttask dispenser right req
	if percept(task(TaskName ,TaskStep, 40,[req(_, _, BlockTypeOther),req(0, 1, BlockType)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)), 
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   bel(targetDispenserAt(_, _, BlockType, _), BlockType \= bx),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockType, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task OldTask nearestDispenser on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	}

	% choose 2-block tasks if it exists and both dispensers known left req
	if percept(task(TaskName ,TaskStep, 40,[req(0, 1, BlockType),req(_, _, BlockTypeOther)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)),
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   bel(mapDispenser(_, _, dispenser, BlockType, _, _)),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
				     insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockType, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task basic disp known on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	} 	

	% choose 2-block tasks if it exists and both dispensers known right req
	if percept(task(TaskName ,TaskStep, 40,[req(_, _, BlockTypeOther),req(0, 1, BlockType)])),
	   bel(limitStepsTask(_, Task2Limit, _, _)),
	   bel(step(SimStep), TaskStep >= SimStep, TaskStep - SimStep >= Task2Limit),
	   bel(mapDispenser(_, _, dispenser, BlockType, _, _)),
	   checkAvailableAgentsAndDispensers(BlockTypeOther)
	    then {
	        if not(bel(calculateNewGoalzoneMD)) 
	        	then insert(calculateNewGoalzoneMD).		
			if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
				then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
					 insert(currentChosenTask(TaskName, TaskStep, 40, 0, 1, BlockType, submittingAgentTwoTask, 
				            supporterREQPending)) + 
				     print("ModuleChoseTask 2task basic disp known on step "+SimStep+" till "+TaskStep) + 
				     exit-module.
	} 
	
} % end module