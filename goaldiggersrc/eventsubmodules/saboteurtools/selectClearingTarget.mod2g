use "../../goaldiggerProlog" as knowledge.
use "../../goaldiggerAction" as actionspec.

module selectClearingTarget {

	if not(bel(visionRange(_)))
	  then insert(visionRange(5)).

	if not(bel(maxEnergy(_)))
	  then insert(maxEnergy(100)).

	if not(bel(recoverEnergy(_)))
	  then insert(recoverEnergy(2)).

	if bel(clearingTarget(X,Y)) then delete(clearingTarget(X,Y)).
	 
	forall bel(inactiveSighting(X,Y,Timer)) do {
		if bel(Timer > 0, NewTimer is Timer -1) 
		  then delete(inactiveSighting(X,Y,Timer)) + insert(inactiveSighting(X,Y,NewTimer)).
		if bel(Timer =:= 0) then delete(inactiveSighting(X,Y,Timer)).
	} 
	 
	forall bel(agentSighting(X,Y,DirX,DirY,_,_)) do {
	
%		   if true then print("Entered clearing section 1").
%		   if true then print("Entered clearing section 2").
%		   if bel(clearingTarget(OldX,OldY), OldDistance is abs(OldX) + abs(OldY), agentAt(X2,Y2,_)) then {
%		   		if bel(NextPosX is X + DirX, NextPosY is Y + DirY, localize(X1,Y1,X2,Y2,NextPosX,NextPosY),
%		   		       NewDistance is abs(X1) + abs(Y1), NewDistance < OldDistance)
%		   		   then delete(clearingTarget(OldX,OldY)) + insert(clearingTarget(X1,Y1)).
%		   }
		  		  
		  if not(bel(clearingTarget(_,_))), not(bel(inactiveSighting(X,Y,_))),
		    bel(agentAt(X2,Y2,_), NextPosX is X + DirX, NextPosY is Y + DirY, X1 is NextPosX - X2, Y1 is NextPosY - Y2), 
		    not(bel(X1 =:= 0, Y1 =:= 0)), bel(abs(X1) + abs(Y1) =< 2)
		       
		    then insert(clearingTarget(X1,Y1)) + print("Entered clearing section 3").
	}

}