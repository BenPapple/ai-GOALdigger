use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * calculate worldsize and send, delete message cache
 *
 */

module handleMessageDistStepNamePosition {	

	% STORE all distStepNamePosition messages from other agents into belief
	forall (_).sent(distStepNamePosition(DistX, DistY, Step, AgentName, AgentX, AgentY)) 
		do insert(distStepNamePosition(DistX, DistY, Step, AgentName, AgentX, AgentY)).

	% CALCULATE and sends the agent's OFFSET if having distStepNamePosition&myDistStepNamePosition message and there is no more than one other message which can be interpreted as its counterpart
	forall bel(myDistStepNamePosition(MyDistX, MyDistY, Step, MyPosX, MyPosY)) do {
	
		 if percept(step(CurrentStep)), bel(messageProcessingDelay(Delay), StepLimit is CurrentStep - Delay, Step < StepLimit, distStepNamePosition(AgentDistX, AgentDistY, Step, AgentNameSender, AgentPosX, AgentPosY),
				AgentDistX =:= -MyDistX, AgentDistY =:= -MyDistY), not(bel(agentOffset(AgentNameSender,_,_,_))), bel(ApparentPosX is MyPosX+MyDistX, ApparentPosY is MyPosY+MyDistY), 
				bel(distanceBetweenPoints(ApparentPosX, ApparentPosY, AgentPosX, AgentPosY, OffsetX, OffsetY))
					then insert(agentOffset(AgentNameSender, OffsetX, OffsetY, Step)) + delete (distStepNamePosition(AgentDistX, AgentDistY, Step, AgentNameSender, AgentPosX, AgentPosY))
						+ allother.send(agentOffset(AgentNameSender, OffsetX, OffsetY, Step)).	
			
	}

	% CALCULATE and sends WORLDSIZE to other agents if he sees other agent with seemingly walked around world coordinates to start calculation
	if not(bel(worldUpdatedX, worldUpdatedY)), percept(step(CurrentStep)) then {	

		forall bel(myDistStepNamePosition(MyDistX, MyDistY, Step, MyPosX, MyPosY), distStepNamePosition(AgentDistX, AgentDistY, Step, AgentNameSender, _, _), 
			MyDistX =:= -AgentDistX, MyDistY =:= -AgentDistY, otherAgentAt(AgentNameSender, KnownAgentPosX,KnownAgentPosY, Step), 
			messageProcessingDelay(Delay), StepLimit is CurrentStep - Delay, Step < StepLimit) do {
				
				if bel( SeenAgentPosX is MyPosX + MyDistX, SeenAgentPosY is MyPosY + MyDistY, worldSizeX(OldWorldX), worldSizeY(OldWorldY),
					(SeenAgentPosX \= KnownAgentPosX; SeenAgentPosY \= KnownAgentPosY),
					distanceBetweenPoints(KnownAgentPosX, KnownAgentPosY, SeenAgentPosX, SeenAgentPosY, ApparentDeltaX, ApparentDeltaY),
					getWorldSize(ApparentDeltaX, OldWorldX, NewWorldX),	getWorldSize(ApparentDeltaY, OldWorldY, NewWorldY))	then {
								
						if bel(NewWorldX \== OldWorldX) then all.send(worldSizeX(NewWorldX)).
						if bel(NewWorldY \== OldWorldY) then all.send(worldSizeY(NewWorldY)).
					   
				}
				
		} % end do
	} % end if

    % DELETE all myDistStepNamePosition messages which are compatible with more than one distStepNamePosition messages.
	forall bel(distStepNamePosition(DistX, DistY, Step, Agent1Name, _, _), distStepNamePosition(DistX, DistY, Step, Agent2Name, _, _),
		Agent1Name \== Agent2Name, myDistStepNamePosition(MyDistX, MyDistY, Step, MyPosX, MyPosY), MyDistX =:= -DistX, MyDistY =:= -DistY)
			do {
			    if bel(myDistStepNamePosition(MyDistX, MyDistY, Step, MyPosX, MyPosY)) then delete(myDistStepNamePosition(MyDistX, MyDistY, Step, MyPosX, MyPosY)). 
			}

	% DELETE old distanceStepNamePosition messages
	forall bel(distStepNamePosition(DistX, DistY, StepMsg, Name, PosX, PosY)) do { 
	
		if percept(step(CurrentStep)), bel(messageProcessingDelay(Delay), messagePersitanceAfterDelay(Persistance), 
		           StepLimit is CurrentStep - Delay - Persistance, StepMsg < StepLimit),
		   bel(distStepNamePosition(DistX, DistY, Step, Name, PosX, PosY))
		      then delete(distStepNamePosition(DistX, DistY, Step, Name, PosX, PosY)).
		 
	} % end if

    % DELETE old myDistanceStepNamePosition messages
	forall bel(myDistStepNamePosition(DistX, DistY, StepMsg, PosX, PosY)) do { 
	
		if percept(step(CurrentStep)), bel(messageProcessingDelay(Delay), messagePersitanceAfterDelay(Persistance), 
		           StepLimit is CurrentStep - Delay - Persistance, StepMsg < StepLimit),
		   bel(myDistStepNamePosition(DistX, DistY, Step, PosX, PosY))
		      then delete(myDistStepNamePosition(DistX, DistY, Step, PosX, PosY)).
		 
	} % end if	
	
}