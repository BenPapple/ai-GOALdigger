use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * Handles calculating distance of goalzones to agent and manages inserting goalzone data from percept into belief
 *
 */

module updateGoalzoneDistance {
	
	% RESET old MD values in mapGoalZones to high number expected to not occur in simulation
	forall bel(mapGoalZone(XAlt, YAlt, MdAlt)) 
		do delete(mapGoalZone(XAlt, YAlt, MdAlt)) +
		   insert(mapGoalZone(XAlt, YAlt, 123456)).

	% RESET old MD values in targetgoalzones to high number expected to not occur in simulation
	if bel(targetClosestGoalZone(XAlt, YAlt, MdAlt), haveBlockAttached(true,_)) 
	    then delete(targetClosestGoalZone(XAlt, YAlt, MdAlt)) + 
	         insert(targetClosestGoalZone(XAlt, YAlt, 1234567)).

	% CALCULATE MD for all stored in bel goalzones
	forall bel(mapGoalZone(X, Y, MdAlt)), bel(agentAt(X2, Y2, _), calculateXYMd(X, Y, X2, Y2, Md)) 
		do {
			if bel(mapGoalZone(X, Y, MdAlt)) 
				then delete(mapGoalZone(X, Y, MdAlt)) + 
				     insert(mapGoalZone(X, Y, Md)).
	}

	% COMPARE lowest MD value for ALL stored goalzones
	forall bel(mapGoalZone(X2, Y2, MDZone)) 
		do {
			if bel(targetClosestGoalZone(X, Y, MDTarget), MDZone < MDTarget) 
			    then delete(targetClosestGoalZone(X, Y, MDTarget)) + 
			         insert(targetClosestGoalZone(X2, Y2, MDZone)).
	}
	
} % module
