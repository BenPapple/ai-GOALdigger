use "../../goaldiggerProlog" as knowledge.
use "../../goaldiggerAction" as actionspec.

/**
 * Manage worldsizes of all agents and update believe when worldsize known with recalculated coordinates
 *
 * @author Isaac S.
 */

module updateWorldSizeData {

	% Fill a list with worldSizeX values
	if not(bel(worldUpdatedX)) 
		then {
			forall (_).sent(worldSizeX(SizeX))	
				do {
					if bel(worldListX(WorldListX), length(WorldListX, Length), worldSizeX(KnownSize), 
					       SizeX =< KnownSize, (Length < 10)) 
						then delete(worldListX(WorldListX)) + 
						     insert(worldListX([SizeX | WorldListX])). 
		}
	}
	
	% Fill a list with worldSizeY values
	if not(bel(worldUpdatedY)) 
		then {
			forall (_).sent(worldSizeY(SizeY))	
				do {
			 		if bel(worldListY(WorldListY), length(WorldListY, Length), worldSizeY(KnownSize), 
			 		       SizeY =< KnownSize, (Length < 10)) 
			 			then delete(worldListY(WorldListY)) + 
			 			     insert(worldListY([SizeY | WorldListY])). 
		}
	}

	% Update world sizes with the most common values in the X and Y mesasurement lists 
	% once both lists lenghts are equal or greater than 4
	if bel(worldListX(WorldListX), length(WorldListX, LengthX), LengthX >= 4, worldListY(WorldListY), 
	       length(WorldListY, LengthY), LengthY >= 4, 
		   msort(WorldListX, SListX), rle(SListX, RLEX), sort(RLEX, SRLEX),last(SRLEX, [FreqX, MostCommonX]), 
		   length(WorldListX, ListLenX), FreqX > ListLenX/2,
		   msort(WorldListY, SListY), rle(SListY, RLEY), sort(RLEY, SRLEY),last(SRLEY, [FreqY, MostCommonY]), 
		   length(WorldListY, ListLenY), FreqY > ListLenY/2),
	   bel(worldSizeX(OldWorldSizeX), worldSizeX(OldWorldSizeY))
	   
		then {
		 if bel(MostCommonX =< OldWorldSizeX) 
		     then delete(worldSizeX(OldWorldSizeX)) + 
		          insert(worldSizeX(MostCommonX)) + 
		          insert (worldUpdateX) + 
		          insert(worldUpdatedX).
		     
		 if bel(MostCommonY =< OldWorldSizeY) 
		     then delete(worldSizeY(OldWorldSizeY)) + 
		          insert(worldSizeY(MostCommonY)) + 
		          insert (worldUpdateY) + 
		          insert(worldUpdatedY).
    }		

	% remove conditionals update belief coord
	if bel(worldUpdateX) 
		then delete(worldUpdateX).
	if bel(worldUpdateY) 
		then delete(worldUpdateY).	

}