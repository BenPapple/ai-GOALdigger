use "../../goaldiggerProlog" as knowledge.

/**
 * ToDo 2task hack: Coordinate messages between agents about relative coordinates
 *
 */

module handleMessageAgentOffsetLegacy {

    % delete last sim survived messages
    forall percept(step(SimStep)), bel(storedSeenOtherAgentAt(V1, V2, V3, V4, MsgStep, V6), MsgStep > SimStep) 
        do {
        if bel(storedSeenOtherAgentAt(V1, V2, V3, V4, MsgStep, V6))
            then delete(storedSeenOtherAgentAt(V1, V2, V3, V4, MsgStep, V6)).
    }

	% evaluate seenOtherAgentAt messages for offset concerning duplicate senders and cashed messages older than 4 steps
	forall bel(storedSeenOtherAgentAt(OwnX, OwnY, OtherX, OtherY, Step, AgentReceiver)) do {
	    if percept(name(AgentReceiver), step(SimStep), Step < SimStep -4), 
           not(bel(storedSeenOtherAgentAt(_, _, OtherX, OtherY, Step, AgentNameSender2), 
	               AgentReceiver \== AgentNameSender2))
		    then {

			% if only 1x inverse coordinates are found
			if bel(storedSeenOtherAgentAt(SenderX, SenderY, OtherX1, OtherY1, Step, AgentNameSender)),
			   bel(AgentReceiver \= AgentNameSender, (OtherX) =:= -1 * (OtherX1), (OtherY) =:= -1 * (OtherY1)), 
			   not(bel(confirmedOtherAgentAt(_, _, AgentNameSender))) then {
					
				if not(bel(storedSeenOtherAgentAt( _, _, OtherX1, OtherY1, Step, AgentNameSender3), 
				                AgentNameSender \== AgentNameSender3)) then {

					% calculate offset
					if true then {
						 if bel(calculateAgentOffset(OwnX, OwnY, SenderX, SenderY, OtherX, OtherY, OffsetX, OffsetY))
							 then insert(confirmedOtherAgentAt(OffsetX, OffsetY, AgentNameSender))
							      + allother.send(myOffsetOfOtherAgent(AgentReceiver, OffsetX, OffsetY, AgentNameSender)).
					}
				}
			}
		}

		 } % do
	
%	% evaluate seenOtherAgentAt messages for offset concerning duplicate senders
%	forall percept(name(AgentReceiver)), 
%	       (Connect1).sent(seenOtherAgentAt(OwnX, OwnY, OtherX, OtherY, Step, AgentReceiver)),
%	       not((_).sent(seenOtherAgentAt( _, _, OtherX, OtherY, Step, AgentNameSender2), 
%	                    AgentReceiver \== AgentNameSender2))
%		 do {
%		
%			% if relative coordinates for other agents are unknown
%			if (Connect2).sent(seenOtherAgentAt(SenderX, SenderY, OtherX1, OtherY1, Step, AgentNameSender)),
%			   bel(Connect1 \= Connect2, (OtherX) =:= -1 * (OtherX1), (OtherY) =:= -1 * (OtherY1)), 
%			   not(bel(confirmedOtherAgentAt(_, _, AgentNameSender))) then {
%					
%				if not((_).sent(seenOtherAgentAt( _, _, OtherX1, OtherY1, Step, AgentNameSender3), 
%				                AgentNameSender \== AgentNameSender3)) then {
%					
%					% and no more than 2 agents have these relative position communicated
%					if true then {
%						 if bel(calculateAgentOffset(OwnX, OwnY, SenderX, SenderY, OtherX, OtherY, OffsetX, OffsetY))
%							 then insert(confirmedOtherAgentAt(OffsetX, OffsetY, AgentNameSender)).		
%					}
%				}
%			}
%				
%		 } % do
		
} % end module