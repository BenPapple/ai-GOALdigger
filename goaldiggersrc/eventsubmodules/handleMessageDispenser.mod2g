use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../pathfinding/executeRandomMove" as module.

module handleMessageDispenser {

	% TO DO: When the new Offset calculation is ready, change confirmedOtherAgentAt with agentOffset
	% TO DO: When the world measurement is ready, adapt coordinates additionaly to world size
	
	% Check received messageDispenser messages.
	forall (SenderConnect).sent(messageDispenser(X,Y,dispenser,BlockType,Bool,SenderName)) do {
			if bel(storedOtherAgentStatus(SenderName, _, _, _, SenderConnect, _, _, _), 
			       confirmedOtherAgentAt(OffsetX,OffsetY,SenderName), X1 is X + OffsetX, Y1 is Y + OffsetY), 
			   not(bel(storedDispenser(X1,Y1,_,_,_,_))) then insert(storedDispenser(X1,Y1,dispenser,BlockType,12345,Bool)).
		}
	
	% Ask for stored dispensers of the needed type if none are known
	% TO DO: When the new Offset calculation is ready, change confirmedOtherAgentAt with agentOffset
			
	if bel(currentChosenTask(_, _, _, _, _, BlockType, _,_)), not(bel(storedDispenser(_,_,_,BlockType,_,_))),
	   percept(name(MyName)) then {
			forall bel(storedOtherAgentStatus(SenderName, _, _, _, SenderConnect, _, _, _), confirmedOtherAgentAt(_,_,SenderName))
				do (SenderConnect).send(messageNeedDispenser(BlockType, MyName)).
	}
	
}