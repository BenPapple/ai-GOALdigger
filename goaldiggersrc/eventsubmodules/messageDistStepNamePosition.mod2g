use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * When our agent sees another agent it will send all other agents messages with the distance it sees the other agent at, the step, its name and its position
 * in its system of coordinates.
 *
 */

module messageDistStepNamePosition {
	
	% ToDo Not the right place to update from percept into belief, see module init for values needed to store only once
	% name and team appear in every percept too, no need to put in belief
	if not(bel(ownName(Name))), percept(name(Name)) then insert(ownName(Name)) + print(ownName(Name)).
	if not(bel(ownTeam(Team))), percept(team(Team)) then insert(ownTeam(Team)) + print(ownTeam(Team)).
	
	% send sync message to other agents to coordinate coordinates :D
	forall percept(thing(DistX, DistY, entity, Details), step(Step)), bel(ownTeam(Team), Details = Team),
		bel(DistX \== 0, DistY \== 0),
		bel(agentAt(AgentX,AgentY)), 
		bel(Step > 2),
		bel(ownName(AgentName))
			do allother.send(distStepNamePosition(DistX, DistY, Step, AgentName, AgentX, AgentY))
				+ insert(myDistStepNamePosition(DistX, DistY, Step, AgentX, AgentY)).


	% send current pos of agent to other agents
	if bel(agentAt(X, Y), ownName(Name)), percept(step(Step)) then allother.send(otherAgentAt(Name, X, Y, Step)).
	
}