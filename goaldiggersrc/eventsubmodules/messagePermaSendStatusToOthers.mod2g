use "../goaldiggerProlog" as knowledge.

/**
 * Sending agents status and sync messages to all other agents
 *
 */
 
module messagePermaSendStatusToOthers {

	% send a status to all other agents while having block attached
	if bel(randomSeed(Seed), agentAt(X, Y), haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, A, B)), 
		percept(name(OwnName), step(Step),role(Role), thing(A, B, block, BlockTypeAttached)) then
			allother.send(otherAgentStatus(OwnName, X, Y, Step, Seed, Role, BlockTypeAttached)).
	
	% send a status to all other agents without having block attached		
	if bel(randomSeed(Seed), agentAt(X, Y), haveBlockAttached(false, _)), 
	   percept(name(OwnName), role(Role), step(Step)) then
	    allother.send(otherAgentStatus(OwnName, X, Y, Step, Seed, Role, noBlock)).
	
	% Sending other agents its position, name, step and position of perceived next agent if agent is being seen
	forall percept(team(TeamName), thing(OtherX, OtherY, entity, TeamName), OtherX \= 0, OtherY \= 0, name(OwnName)), 
	       bel(agentAt(OwnX,OwnY), step(Step), Step > 2)
		do (channelNamesRelativeXY).send(seenOtherAgentAt(OwnX, OwnY, OtherX, OtherY, Step, OwnName)).
		
%	% send sync message to other agents to coordinate coordinates :D
%	forall percept(thing(EntityX, EntityY, entity, EntityTeam), step(Step)), bel(ownTeam(MyTeam), EntityTeam == MyTeam),
%		   bel(EntityX \== 0, EntityY \== 0),
%		   bel(agentAt(MyX,MyY)), 
%		   bel(Step > 2),
%		   bel(ownName(MyName)) do {
%		       if true then allother.send(distStepNamePosition(EntityX, EntityY, Step, MyName, MyX, MyY)).
%		          if not(bel(myDistStepNamePosition(EntityX, EntityY, Step, MyX, MyY))) then 
%		              insert(myDistStepNamePosition(EntityX, EntityY, Step, MyX, MyY)).
%	}
	
} % end module