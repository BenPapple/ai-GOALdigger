use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.
use "../eventsubmodules/updateNearestAgentDistance" as module.

/**
 * coordination for tasks greater than 1 (submittingAgent & supportingAgent)
 *
 */
 
module messageMultiTaskCoordination {

	% SUBMODULE update nearest Agent on map for submitterleader when necessary
	if bel(currentChosenTask(_, _, _, _, _, _, submittingAgentTwoTask, supporterREQPending)),
	   bel(submitterLeader, confirmedOffsetOfAgent(_, _, _)) 
	   	then updateNearestAgentDistance.

	% set other agent with needed block as supporter and oneself as submitter
	if bel(submitterLeader, currentChosenTask(TaskName, V2, V3, V4, V5, V6, submittingAgentTwoTask, 
	                                          supporterREQPending)),
	   bel(confirmedOffsetOfAgent(_, _, _)) 
	    then {
			if percept(task(TaskName,_, 40,[req(0,1,BlockType1),req(X2,Y2,BlockSupporter)]), name(SubmitterName)) 
				then {
					if bel(targetNearestAgentWithNeededBlock(SupporterName, _, _, _), SupporterName \= placeholder) 
						then {
							if true then (channnelMultiTask).send(informSupportingAgent(secondBlock, SubmitterName, 
							                                      supportingAgent, SupporterName, X2, Y2, 
							                                      BlockSupporter, TaskName)).
							if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14,
							       W15, W16)) 
		                        then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, 
		                                                             W13, W14, W15, W16)) +
		                             insert(multiTaskSupporterStatus(W1, SupporterName, X2, Y2, pending, W6, W7, W8, W9, 
		                                                             W10, W11, W12, W13, W14, W15, W16)).
							if true then delete(currentChosenTask(TaskName, V2, V3, V4, V5, V6, submittingAgentTwoTask, 
							                    supporterREQPending)) + 
								         insert(currentChosenTask(TaskName, V2, V3, 0, 1, BlockType1, 
								                submittingAgentTwoTask, supportersNotified)) +
								         exit-module.
						}
			}
				
			if percept(task(TaskName ,_, 40,[req(X2,Y2,BlockSupporter),req(0,1, BlockType2)]), name(SubmitterName)) 
				then {
					if bel(targetNearestAgentWithNeededBlock(SupporterName, _, _, _), SupporterName \= placeholder) 
						then {
							if true then (channnelMultiTask).send(informSupportingAgent(secondBlock, SubmitterName, 
							                                      supportingAgent, SupporterName, X2, Y2, 
							                                      BlockSupporter, TaskName)).
							if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14,
							       W15, W16)) 
		                        then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, 
		                                                             W13, W14, W15, W16)) +
		                             insert(multiTaskSupporterStatus(W1, SupporterName, X2, Y2, pending, W6, W7, W8, W9, 
		                                                             W10, W11, W12, W13, W14, W15, W16)).						                                      
							if true then delete(currentChosenTask(TaskName, V2, V3, V4, V5, V6, submittingAgentTwoTask, 
							                    supporterREQPending)) + 
								         insert(currentChosenTask(TaskName, V2, V3, 0, 1, BlockType2, 
								                submittingAgentTwoTask, supportersNotified)) +
								         exit-module.
					}
			}
	} % other agent has block
	
	% set nearest agent without fitting block
	if bel(submitterLeader, currentChosenTask(TaskName, V2, V3, V4, V5, V6, submittingAgentTwoTask, 
	                                          supporterREQPending)),
	   bel(confirmedOffsetOfAgent(_, _, _)) 
	    then {
			if percept(task(TaskName,_, 40,[req(0,1,BlockType1),req(X2,Y2,BlockSupporter)]), name(SubmitterName)) 
				then {
					if bel(targetNearestAgent(SupporterName, _, _, _), SupporterName \= placeholder)
						then {
							if true then (channnelMultiTask).send(informSupportingAgent(secondBlock, SubmitterName, 
							                                      supportingAgent, SupporterName, X2, Y2, 
							                                      BlockSupporter, TaskName)).
							if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14,
							       W15, W16)) 
		                        then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, 
		                                                             W13, W14, W15, W16)) +
		                             insert(multiTaskSupporterStatus(W1, SupporterName, X2, Y2, pending, W6, W7, W8, W9, 
		                                                             W10, W11, W12, W13, W14, W15, W16)).							                                      
						if true then delete(currentChosenTask(TaskName, V2, V3, V4, V5, V6, submittingAgentTwoTask, 
						                    supporterREQPending)) + 
							         insert(currentChosenTask(TaskName, V2, V3, V4, V5, BlockType1, 
							                submittingAgentTwoTask, supportersNotified)) +
							         exit-module.
					}
		}
			
		if percept(task(TaskName ,_, 40,[req(X2,Y2, BlockSupporter),req(0,1, BlockType2)]), name(SubmitterName)) 
			then {
				if bel(targetNearestAgent(SupporterName, _, _, _), SupporterName \= placeholder) 
					then {
						if true then (channnelMultiTask).send(informSupportingAgent(secondBlock, SubmitterName, 
						                                      supportingAgent, SupporterName, X2, Y2, BlockSupporter, 
						                                      TaskName)).
							if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14,
							       W15, W16)) 
		                        then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, 
		                                                             W13, W14, W15, W16)) +
		                             insert(multiTaskSupporterStatus(W1, SupporterName, X2, Y2, pending, W6, W7, W8, W9, 
		                                                             W10, W11, W12, W13, W14, W15, W16)).						                                      
						if true then delete(currentChosenTask(TaskName, V2, V3, V4, V5, V6, submittingAgentTwoTask, 
						                    supporterREQPending)) + 
							         insert(currentChosenTask(TaskName, V2, V3, 0, 1, BlockType2, 
							                submittingAgentTwoTask, supportersNotified)) +
							         exit-module.
				}
		}
	} % other agent has no block or no fitting block
	
	% RECEIVE as submitterLeader ACK for second block from supporter
	forall (_).sent(msgACKtask(secondBlock, NameSupporter)), 
	       bel(submitterLeader),
	       bel(multiTaskSupporterStatus(_, NameSupporter, _, _, pending, _, _, _, _, _, _, _, _, _, _, _))      
	   	do {
		 if bel(multiTaskSupporterStatus(Task, NameSupporter, X1, Y1, pending, Connected1, Name2, X2, Y2, Pending2, 
		                                 Connected2, Name3, X3, Y3, Pending3, Connected3)) 
		     then delete(multiTaskSupporterStatus(Task, NameSupporter, X1, Y1, pending, Connected1, Name2, X2, Y2, Pending2, 
		                                 Connected2, Name3, X3, Y3, Pending3, Connected3)) +
		          insert(multiTaskSupporterStatus(Task, NameSupporter, X1, Y1, ack, Connected1, Name2, X2, Y2, Pending2, 
		                                 Connected2, Name3, X3, Y3, Pending3, Connected3)).
    }
		   
   	% RECEIVE as submitterLeader NoACK from supporter
	forall (_).sent(msgNoACKtask(_, _)), 
	       bel(submitterLeader),
	       bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, supportersNotified))	       
	   	do delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, supportersNotified)) +
		   insert(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, supporterREQPending)).
	
	% RECEIVE submitterLeader order cease supporting
	if (_).sent(informCeaseSupporting(NameSender)), 
	   bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, NameSender)) ,
	   not(bel(submitterLeader)) 
	   	then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, NameSender)) +
			 insert(currentChosenTask(V1, -1, V3, V4, V5, V6, needNewTask, needNewTask)).
	
	
	% RECEIVE become secondBlock supportingAgent, check block for task and target		
	forall percept(name(NameOwn)), 
	       (ConnectSender).sent(informSupportingAgent(secondBlock, NameSender, supportingAgent, NameOwn, SendX, SendY, 
	                                                  SendBlock, TaskName)) 
	    do{ 
	    if bel(currentChosenTask(_, _, _, _, _, _, supportingAgent, _)),
	       not(bel(submitterLeader)) 
	   	    then (ConnectSender).send(msgNoACKtask(secondBlock, NameOwn)). 	
	   	       
        if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, ClientServer, V8), ClientServer \= supportingAgent),
	       percept(task(TaskName ,TaskStep, Points,[req(_, _, _),req(_, _, _)])),
	       not(bel(submitterLeader)) 
	   	    then {
				if true then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, ClientServer, V8)) +
				             insert(currentChosenTask(TaskName, TaskStep, Points, SendX, SendY, SendBlock, 
				                    supportingAgent, NameSender)) +
				             (ConnectSender).send(msgACKtask(secondBlock, NameOwn)).					
        } % if 2
	} % forall
	
 } % end module