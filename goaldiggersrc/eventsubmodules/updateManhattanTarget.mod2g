use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * Handles calculating distance of goalzones to agent and manages inserting goalzone data from percept into belief
 *
 */
 
 % ToDo Module not used see if still necessary

module updateManhattanTarget {

%	% choose other task if percept shows dispenser for fitting not expired 1-block task
%	if percept(step(Step)), bel(currentChosenTask(V1, TaskStep, V3, V4, V5, BlockType), TaskStep >= Step, targetMd(X, Y, Target)), 
%		percept(task(TaskNameNew ,TaskStepNew, 10,[req(Xt,Yt,BlockTypeNew)]), TaskStepNew >= Step, TaskStepNew - Step >= 30), bel(BlockType \= BlockTypeNew),
%		percept(thing(XNew,YNew,dispenser,BlockTypeNew))
%		, bel(agentAt(X2, Y2), localize(XNew, YNew, X2, Y2, X3, Y3))
%		, not(percept(thing(XNew,YNew,dispenser,BlockTypeNew), abs(XNew) =< 1, abs(YNew) =< 1))
%		
%		then delete(targetMd(X, Y, Target)) + insert(targetMd(X3, Y3, dispenser)) 
%    		+ delete(currentChosenTask(V1, TaskStep, V3, V4, V5, BlockType)) + insert(currentChosenTask(TaskNameNew ,TaskStepNew, 10,Xt,Yt,BlockTypeNew))
%    		+ insert(executeManhattan).
%    		
%    % choose dispenser from percept for fitting not expired active in agent 1-block task 
%	if percept(step(Step)), bel(currentChosenTask(_, TaskStep, _, _, _, BlockType), TaskStep >= Step, targetMd(X, Y, Target)), 
%		percept(thing(XNew,YNew,dispenser,BlockType))
%		, bel(agentAt(X2, Y2), localize(XNew, YNew, X2, Y2, X3, Y3))
%		, not(percept(thing(XNew,YNew,dispenser,BlockType), abs(XNew) =< 1, abs(YNew) =< 1))
%		, not(bel(executeManhattan))
%		
%		then delete(targetMd(X, Y, Target)) + insert(targetMd(X3, Y3, dispenser)) 
%    		 + insert(executeManhattan).
	
} % end module