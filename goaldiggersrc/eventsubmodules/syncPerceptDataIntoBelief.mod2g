use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * Store (or delete if not in percept anymore) objects from percept into belief with corrected coordinates
 *
 */

module syncPerceptDataIntoBelief {

	% Update step counter with new step when new percept step available
	if percept(step(X)), bel(step(Y), X\==Y, X>0) then delete(step(Y)) + insert(step(X)).
	
	% DELETE out of step storedOtherAgentStatus
	forall percept(step(SimStep)),
	       bel(storedOtherAgentStatus(SenderName, MsgStep, Role, Seed, SenderConnect, X, Y, BlockTypeAttached),
	           MsgStep > SimStep) 
	    do {
	    if bel(storedOtherAgentStatus(SenderName, MsgStep, Role, Seed, SenderConnect, X, Y, BlockTypeAttached))
	        then delete(storedOtherAgentStatus(SenderName, MsgStep, Role, Seed, SenderConnect, X, Y, BlockTypeAttached)).
	}
	
	% STORE unknown dispensers from percept with MD field
	forall percept(thing(X, Y, dispenser, Details), name(MyName)) do {
	    if bel(agentAt(X2, Y2, _), localize(X, Y, X2, Y2, X3, Y3)), 
	    not(bel((mapDispenser(X3, Y3, dispenser, Details, _, _)))) then {
	        if true then insert(mapDispenser(X3, Y3, dispenser, Details, 0, false))
	        + allother.send(msgDispenserData(X3, Y3, dispenser, Details, false, MyName)).	        
	    }
	}	
	
	% STORE unknown goalzones with MD field
	forall percept(goalZone(X, Y)) do {
	    if bel(agentAt(X2, Y2, _), localize(X, Y, X2, Y2, X3, Y3)), not(bel((mapGoalZone(X3, Y3, _)))) then {
		    if true then insert(mapGoalZone(X3, Y3, 0)).
		    if not(bel(calculateNewGoalzoneMD)) then insert(calculateNewGoalzoneMD).
		}
    }
    
    % STORE unknown rolezones with MD field
	forall percept(roleZone(X, Y)) do {
	    if bel(agentAt(X2, Y2, _), localize(X, Y, X2, Y2, X3, Y3)), not(bel((mapRoleZone(X3, Y3, _)))) then 
		    insert(mapRoleZone(X3, Y3, 0)).
    }

	% DELETE dispenser from belief if not seen in percept		
	forall bel(mapDispenser(X1, Y1, dispenser, Details, MDValue, Bool)) do {
	    if bel(mapDispenser(X1, Y1, dispenser, Details, MDValue, Bool)),
	       bel( agentAt(X2, Y2, _), X3 is X1 - X2, Y3 is Y1 - Y2, abs(X3) + abs(Y3) =< 5),
	       not(percept(thing(X3, Y3, dispenser, _))) 
		    then delete(mapDispenser(X1, Y1, dispenser, Details, MDValue, Bool)).
    }
		
	% DELETE disappeared goalzones
	forall bel(mapGoalZone(X, Y, Md)) do{
	    if bel(mapGoalZone(X, Y, Md)), bel(agentAt(X2, Y2, _), X3 is X - X2, Y3 is Y - Y2, abs(X3) + abs(Y3) =< 5),
	       not(percept((goalZone(X3, Y3)))) then delete(mapGoalZone(X, Y, Md)).
	       % ToDo: In order to activate the messages for deletd goal zones, add:
	       % To the conditions: percept(name(MyName))
	       % To the actions: allother.send(messageDeletedGoalZone(X, Y, MyName))	       
	}
	
	% DELETE disappeared rolezones
	forall bel(mapRoleZone(X, Y, Md)) do{
	    if bel(mapRoleZone(X, Y, Md)), bel(agentAt(X2, Y2, _), X3 is X - X2, Y3 is Y - Y2, abs(X3) + abs(Y3) =< 5),
	       not(percept((roleZone(X3, Y3)))) then delete(mapRoleZone(X, Y, Md)).
  	}
	
	% ToDo too complex agent only needs to store it once not delayed or cached, just overwrite old value with new
    % ToDo sent(otherAgentAt replaced with storedOtherAgentStatus... in belief
	% The agent processes received messages about other agents' positions if it already knows it offsets to those agents
%	forall (_).sent(otherAgentAt(Name, X0, Y0, Step)), 
%	       bel(agentOffset(Name, OffsetToEntityX, OffsetToEntityY, _), step(Step), X1 is X0 + OffsetToEntityX, 
%	           Y1 is Y0 + OffsetToEntityY, worldSizeX(SizeX), worldSizeY(SizeY), 
%	           getModPos(X1, Y1, SizeX, SizeY, X2, Y2)) 
%		do insert(otherAgentAt(Name, X2, Y2, Step)).
%
%	% Remove old otherAgentAt variables:
%	forall percept(step(CurrentStep)), bel(messageProcessingDelay(Delay), messagePersitanceAfterDelay(Persistance), 
%	                                       StepLimit is CurrentStep - Delay - Persistance, 
%		                                   otherAgentAt(AgentNameSender, X, Y, Step), Step < StepLimit) 
%		do delete(otherAgentAt(AgentNameSender,X,Y,Step)). 
	
} % end module