use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * Store (or delete if not in percept anymore) objects from percept into belief with corrected coordinates
 *
 * @author Ben G.
 * @co-author Isaac S.
 */

module syncPerceptDataIntoBelief {

	% Update step counter with new step when new percept step available
	if percept(step(X)), bel(step(Y), X\==Y, X>0)
		then delete(step(Y)) +
		     insert(step(X)).

	% store explored Mark every Round
	if bel(agentAt(X, Y, _)),
	   bel(limitACOSteps(ACOLimit)),
	   percept(step(SimStep), 0 =:= mod(SimStep, 2), SimStep < ACOLimit)
		then insert(mapMarkExplored(X, Y)).

	% DELETE out of step storedOtherAgentStatus
	forall percept(step(SimStep)),
	       bel(storedOtherAgentStatus(SenderName, MsgStep, Role, Seed, SenderConnect, X, Y, BlockTypeAttached,
	                                  TaskRole), MsgStep > SimStep)
	    do {
	    	if bel(storedOtherAgentStatus(SenderName, MsgStep, Role, Seed, SenderConnect, X, Y, BlockTypeAttached,
	    	                              TaskRole))
	        	then delete(storedOtherAgentStatus(SenderName, MsgStep, Role, Seed, SenderConnect, X, Y,
	        	                                   BlockTypeAttached, TaskRole)).
	}

	% STORE unknown dispensers from percept with MD field
	forall percept(thing(X, Y, dispenser, Details), name(MyName))
		do {
	    	if bel(agentAt(X2, Y2, _), localize(X, Y, X2, Y2, X3, Y3)),
	           not(bel((mapDispenser(X3, Y3, dispenser, Details, _, _))))
	           	then {
	        		if true then insert(mapDispenser(X3, Y3, dispenser, Details, 0, false)) +
	        			         allother.send(msgDispenserData(X3, Y3, dispenser, Details, false, MyName)).
	        		if not(bel(calculateNewDispenserMD))
	        			then insert(calculateNewDispenserMD).
	    }
	}

	% STORE unknown goalzones with MD field
	forall percept(goalZone(X, Y)) do {
	    if bel(agentAt(X2, Y2, _), localize(X, Y, X2, Y2, X3, Y3)),
	       not(bel((mapGoalZone(X3, Y3, _)))),
	       percept(name(MyName))
	       	then {
		    	if true then insert(mapGoalZone(X3, Y3, 0)) +
		    				 allother.send(msgGoalZoneData(X3,Y3,MyName)).
		    	if not(bel(calculateNewGoalzoneMD))
		    		then insert(calculateNewGoalzoneMD).
		}
    }

    % STORE unknown rolezones with MD field
	forall percept(roleZone(X, Y))
		do {
	    	if bel(agentAt(X2, Y2, _), localize(X, Y, X2, Y2, X3, Y3)),
	    	   not(bel((mapRoleZone(X3, Y3, _)))),
	    	   percept(name(MyName))
	    	   	then insert(mapRoleZone(X3, Y3, 0)) +
	    	   	     allother.send(msgRoleZoneData(X3,Y3,MyName)).
    }

	% DELETE dispenser from belief if not seen in percept
	forall bel(mapDispenser(X1, Y1, dispenser, Details, MDValue, Bool))
		do {
	    	if bel(mapDispenser(X1, Y1, dispenser, Details, MDValue, Bool)),
	       	bel( agentAt(X2, Y2, _), X3 is X1 - X2, Y3 is Y1 - Y2, abs(X3) + abs(Y3) =< 5),
	       	not(percept(thing(X3, Y3, dispenser, _)))
		    	then delete(mapDispenser(X1, Y1, dispenser, Details, MDValue, Bool)).
    }

	% DELETE disappeared goalzones
	forall bel(mapGoalZone(X, Y, Md))
		do{
	    	if bel(mapGoalZone(X, Y, Md)),
	    	   percept(name(MyName)),
	    	   bel(agentAt(X2, Y2, _), X3 is X - X2, Y3 is Y - Y2, abs(X3) + abs(Y3) =< 5),
	           not(percept((goalZone(X3, Y3))))
	           	then {
                if true then delete(mapGoalZone(X, Y, Md)) +
                     allother.send(messageDeletedGoalZone(X, Y, MyName)) +
                 print("DELETED goalzone by percept "+X+Y).

                if not(bel(calculateNewGoalzoneMD))
                  then insert(calculateNewGoalzoneMD).


	           		if bel(customRole(customRoleSaboteur))  then {

	           			if true then print("deleted goal zone:"+X+" "+Y).
	           			% Delete empty goal zone counters
	           			if bel(emptyGoalZoneCounter(X, Y, Timer))
	           			%minimumDistanceEmptyGoalZone(Distance),  calculateXYMd(X, Y, EmptyX, EmptyY, EmptyMd), EmptyMd < Distance)
	           			   then delete(emptyGoalZoneCounter(X,Y,Timer)).

	           			% Delete goal zone recommendation if found to be empty
	           			if bel(goalZoneSightings(X,Y,A,B,C))
	           			   then delete(goalZoneSightings(X,Y,A,B,C)).

	           			% Delete Manhattan target if goal zone not found upon arrival
	           			if bel(targetMd(X, Y, Target), (Target = goalzoneRecommendation; Target = goalzone))
	           			 	then {
	           			 	  if true then print("Deleted manhattan goal zone").
	           			 	  if true then delete(targetMd(X, Y, Target)).
							  if bel(executeManhattan) then delete(executeManhattan).
							  
	           				} % end Manhattan target deletion
	           			} % end actions for saboteurs
	           	} % end mapGoalZone deletion actions

	       % ToDo: In order to activate the messages for deletd goal zones, add:
	       % To the conditions: percept(name(MyName))
	       % To the actions: allother.send(messageDeletedGoalZone(X, Y, MyName))
	}

	% DELETE disappeared rolezones
	forall bel(mapRoleZone(X, Y, Md))
		do{
	    	if bel(mapRoleZone(X, Y, Md)),
	    	   bel(agentAt(X2, Y2, _), X3 is X - X2, Y3 is Y - Y2, abs(X3) + abs(Y3) =< 5),
	           not(percept((roleZone(X3, Y3))))
	           	then delete(mapRoleZone(X, Y, Md)).
  	}

	% DELETE targetted blokes as Manhattan targets if they have moved away
	if bel(customRole(customRoleSaboteur), executeManhattan, targetMd(X1,Y1, agent), agentAt(X2,Y2,_)),
	   not(percept(thing(X3,Y3,entity,_), localize(X3,Y3,X2,Y2,X1,Y1)))
       then  delete(targetMd(X1, Y1, agent)) + delete(executeManhattan).

	% DELETE targetted blokes carrying blocks as Manhattan targets if they have moved away
	if bel(customRole(customRoleSaboteur), executeManhattan, targetMd(X1,Y1, blockCarrier), agentAt(X2,Y2,_)),
	   not(percept(thing(X3,Y3,entity,_), localize(X3,Y3,X2,Y2,X1,Y1)))
       then  delete(targetMd(X1, Y1, blockCarrier)) + delete(executeManhattan).

	% DELETE targetted blokes carrying blocks on the south side as Manhattan targets if they have moved away
	if bel(customRole(customRoleSaboteur), executeManhattan, targetMd(X1,Y1, blockCarrierSubmitter), agentAt(X2,Y2,_)),
	   not(percept(thing(X3,Y3,entity,_), localize(X3,Y3,X2,Y2,X1,Y1)))
       then  delete(targetMd(X1, Y1, blockCarrierSubmitter)) + delete(executeManhattan).

%	% DELETE unattached blocks as MdTargets if disappeared
%	if bel(customRole(customRoleSaboteur), executeManhattan, targetMd(X1,Y1, lonelyBlock), agentAt(X2,Y2,_)),
%	   not(percept(thing(X3,Y3,block,_), localize(X3,Y3,X2,Y2,X1,Y1)))
%       then  delete(targetMd(X1, Y1, lonelyBlock)) + delete(executeManhattan).

} % end module
