use "../goaldiggerProlog" as knowledge.

/**
 * Remove and restore init values when entering a new simulation
 *
 */

module reinitBeliefOnSimChange {

	% To count sim changes
	%if not(bel(simCount(_))) then insert(simCount(0)). 
	if bel(simCount(SimCount), NewSimCount is SimCount + 1) 
		then delete(simCount(SimCount)) + 
		     insert(simCount(NewSimCount)). 
	
	if bel(count2Task(Num2Task, V2)) 
		then delete(count2Task(Num2Task, V2)) + 
		     insert(count2Task(0, 0)).
		     
	if bel(count3Task(Num3Task, V2)) 
		then delete(count3Task(Num3Task, V2)) + 
		     insert(count3Task(0, 0)).		     

	% restore initial belief
	if bel(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) 
		then delete(currentChosenTask(V1, V2, V3, V4, V5, V6, V7, V8)) + 
		     insert(currentChosenTask(task0, -11001001, 10 , 0, 1, bx, placeholder, placeholder2)).
	if bel(agentAt(V1, V2, V3)) 
		then delete(agentAt(V1, V2, V3)) + 
		     insert(agentAt(0, 0, 0)).
	if bel(executeManhattan) 
		then delete(executeManhattan).
	if not(bel(haveMove)) 
		then insert(haveMove).
		
   	% multitask coordinator for submitterLeader, necessary for other agents for hooks in program logic
	if bel(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17, W18,
	                                W19))
     then delete(multiTaskSupporterStatus(W1, W2, W3, W4, W5, W6, W7, W8, W9, W10, W11, W12, W13, W14, W15, W16, W17,
                                          W18, W19)) + 
          insert(multiTaskSupporterStatus(noTask, placeholder, placeholder, placeholder, placeholder, 
                                          placeholder,placeholder, placeholder, placeholder, placeholder, 
                                          placeholder,placeholder, placeholder, placeholder, placeholder, 
                                          placeholder, placeholder,  placeholder, placeholder)). 
	
	if bel(haveBlockAttached(X, Y)) 
		then delete(haveBlockAttached(X, Y)) + 
			 insert (haveBlockAttached(false, n)). % switch for carried blocks
	if bel(haveDispenserDelivery(X, Y)) 
		then delete(haveDispenserDelivery(X, Y)) + 
			 insert (haveDispenserDelivery(false, 0)). % switch for successful dispenser request
	
	if true then subscribe(channelGoalzone).
	if true then subscribe(channelDispenser).
	if true then subscribe (channelNamesRelativeXY).
	
	%reset assign Role
	if bel(positionInHirarchie(Position)) 
		then delete(positionInHirarchie(Position)) + 
		     insert(positionInHirarchie(0)).
	if bel(targetRole(Role)) 
		then delete(targetRole(Role)) + 
		     insert (targetRole(worker)).
	
	if bel(targetDispenserAt(X, Y, Z, A)) 
		then delete(targetDispenserAt(X, Y, Z, A)) + 
		     insert (targetDispenserAt(70, 70, bx, 700)). % init with dummy values 
	if bel(targetClosestOfAllDispensersAt(X, Y, Z, A)) 
		then delete(targetClosestOfAllDispensersAt(X, Y, Z, A)) + 
		     insert (targetClosestOfAllDispensersAt(70, 70, bx, 700)). % init with dummy values 
	
	% goalzone targets
	if bel(targetClosestGoalZone(X, Y, Z)) 
		then delete(targetClosestGoalZone(X, Y, Z)) + 
		     insert (targetClosestGoalZone(111, 111, 123456)). % init with dummy values 
	
	% rolezone targets
	if bel(targetClosestRoleZone(X, Y, Z)) 
		then delete(targetClosestRoleZone(X, Y, Z)) + 
		     insert (targetClosestRoleZone(111, 111, 123456)). % init with dummy values 	
	
	if bel(targetMd(X, Y, Z)) 
		then delete(targetMd(X, Y, Z)) + 
			 insert (targetMd(-999, -999, placeholdertarget)). % init Manhatten Distance 
	
	if bel(skipThisStep(X)) 
		then delete(skipThisStep(X)) + 
			 insert (skipThisStep(-2)). % turns to skip with random explore move
	
	% on switch delete custom belief data belonging to old simulation
	if bel(expectDifferentSimulations) 
		then {
			forall bel(mapDispenser(V1, V2, V3, V4, V5, V6)) 
				do delete(mapDispenser(V1, V2, V3, V4, V5, V6)).
			forall bel(mapGoalZone(V1, V2, V3)) 
				do delete(mapGoalZone(V1, V2, V3)).
			forall bel(mapRoleZone(V1, V2, V3)) 
				do delete(mapRoleZone(V1, V2, V3)).
			
			forall bel(storedOtherAgentStatus(V1, V2, V3, V4, V5, V6, V7, V8, V9)) 
				do delete(storedOtherAgentStatus(V1, V2, V3, V4, V5, V6, V7, V8, V9)).
			forall bel(confirmedOffsetOfAgent(V1, V2, V3)) 
				do delete(confirmedOffsetOfAgent(V1, V2, V3)).
		    forall bel(cachedSeenOtherAgentAt(V1, V2, V3, V4, V5, V6)) 
		    	do delete(cachedSeenOtherAgentAt(V1, V2, V3, V4, V5, V6)).
		    forall bel(cachedMyOffsetOfOtherAgent(KnownSenderName, OffsetToSenderX, OffsetToSenderY, UnknownAgentName, 
		               Step)) 
		        do delete(cachedMyOffsetOfOtherAgent(KnownSenderName, OffsetToSenderX, OffsetToSenderY, 
		        		  UnknownAgentName, Step)).
	}
	
} % end module