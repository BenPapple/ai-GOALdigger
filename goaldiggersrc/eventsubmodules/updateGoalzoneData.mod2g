use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * Handles calculating distance of goalzones to agent and manages inserting goalzone data from percept into belief
 *
 */

module updateGoalzoneData {
	
	% RESET old MD values in storedgoalzones to high number expected to not occur in simulation
	forall bel(storedGoalZone(XAlt, YAlt, MdAlt)) do delete(storedGoalZone(XAlt, YAlt, MdAlt))
		+ insert(storedGoalZone(XAlt, YAlt, 123456)).

	% RESET old MD values in targetgoalzones to high number expected to not occur in simulation
	if bel(targetClosestGoalZone(XAlt, YAlt, MdAlt), haveBlockAttached(true,_)) 
	    then delete(targetClosestGoalZone(XAlt, YAlt, MdAlt)) + insert(targetClosestGoalZone(XAlt, YAlt, 1234567)).

	% CALCULATE MD for all stored in bel goalzones
	forall bel(storedGoalZone(X, Y, MdAlt)), bel(agentAt(X2, Y2), calculateXYMd(X, Y, X2, Y2, Md)) do {
		if bel(storedGoalZone(X, Y, MdAlt)) then delete(storedGoalZone(X, Y, MdAlt)) + insert(storedGoalZone(X, Y, Md)).
	}

	% COMPARE lowest MD value for ALL stored goalzones
	forall bel(storedGoalZone(X2, Y2, MDZone)) do {
			if bel(targetClosestGoalZone(X, Y, MDTarget), MDZone < MDTarget) 
			    then delete(targetClosestGoalZone(X, Y, MDTarget)) + insert(targetClosestGoalZone(X2, Y2, MDZone)).
	}

} % module
