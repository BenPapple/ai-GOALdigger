use "../../goaldiggerProlog" as knowledge.
use "../../goaldiggerAction" as actionspec.

/**
 * ask for and store send goalzone messages
 *
 */

module handleMessageGoalZone {
	
	% ToDo: When the world measurement is ready, adapt coordinates additionaly to world size
	
	% Check cached msgGoalZoneData messages.
	forall bel(cachedMsgGoalZoneData(X,Y,SenderName)) 	
		do {
			if bel(confirmedOffsetOfAgent(OffsetX,OffsetY,SenderName), X1 is X + OffsetX, Y1 is Y + OffsetY) 
				then {
			    	if not(bel(mapGoalZone(X1,Y1,_))) 
			    		then {
			    			if true then insert(mapGoalZone(X1,Y1, gzStoredFromMessage)).
			    			if bel(cachedMsgGoalZoneData(X,Y,SenderName)) 
			    				then delete(cachedMsgGoalZoneData(X,Y,SenderName)).
			    			if not(bel(calculateNewGoalzoneMD)) 
			    				then insert(calculateNewGoalzoneMD).
			    	} % then
			    	if bel(mapGoalZone(X1,Y1,_)) 
			    		then delete(cachedMsgGoalZoneData(X,Y,SenderName)).
			    } % then
	} %forall
	
	% Check received messageGoalzone messages.
	forall (_).sent(msgGoalZoneData(X,Y,SenderName)) 
		do {
			if bel(confirmedOffsetOfAgent(OffsetX,OffsetY,SenderName), X1 is X + OffsetX, Y1 is Y + OffsetY),
			   not(bel(mapGoalZone(X1,Y1,_))) 
			   	then {
			 		if true then insert(mapGoalZone(X1,Y1, gzStoredFromMessage)).
			 		if not(bel(calculateNewGoalzoneMD)) 
			 			then insert(calculateNewGoalzoneMD).
			 }
			if not(bel(confirmedOffsetOfAgent(_,_,SenderName), cachedMsgGoalZoneData(X,Y,SenderName)))
				then insert(cachedMsgGoalZoneData(X,Y,SenderName)).
	}	
}