use "../../goaldiggerProlog" as knowledge.
use "../../goaldiggerAction" as actionspec.
use "../../pathfinding/executeRandomMove" as module.

/**
 * ask for and store send dispenser messages
 *
 */

module handleMessageDispenser {

	% ToDo: When the world measurement is ready, adapt coordinates additionaly to world size
		
	% Check cached msgDispenserData messages.
	forall bel(cachedMsgDispenserData(X,Y,dispenser,BlockType,Bool,SenderName)) do {
			if bel(confirmedOffsetOfAgent(OffsetX,OffsetY,SenderName), X1 is X + OffsetX, Y1 is Y + OffsetY) then {
			    if not(bel(mapDispenser(X1,Y1,_,_,_,_))) then {
			    	if true then insert(mapDispenser(X1,Y1,dispenser,BlockType,12345,Bool)) + print("Inserted Dispenser from cached message: " + mapDispenser(X1,Y1,dispenser,BlockType,12345,Bool)).
			    	if not(bel(calculateNewDispenserMD)) then insert(calculateNewDispenserMD).
			    	} % then
			    if true then delete(cachedMsgDispenserData(X,Y,dispenser,BlockType,Bool,SenderName)).
			    } % then
	} %forall

	forall (_).sent(msgDispenserData(X,Y,dispenser,BlockType,Bool,SenderName)) do {
			if bel(confirmedOffsetOfAgent(OffsetX,OffsetY,SenderName), X1 is X + OffsetX, Y1 is Y + OffsetY), 
			   not(bel(mapDispenser(X1,Y1,_,_,_,_))) then {
			       if true then insert(mapDispenser(X1,Y1,dispenser,BlockType,12345,Bool)) + print("Inserted Dispenser from message: " + mapDispenser(X1,Y1,dispenser,BlockType,12345,Bool)).
			       if not(bel(calculateNewDispenserMD)) then insert(calculateNewDispenserMD).
			}
			if bel(not(confirmedOffsetOfAgent(_,_,SenderName)), 
			       not(cachedMsgDispenserData(X,Y,dispenser,BlockType,Bool,SenderName)))
			then insert(cachedMsgDispenserData(X,Y,dispenser,BlockType,Bool,SenderName)).
	}
}