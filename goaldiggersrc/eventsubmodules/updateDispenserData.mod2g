use "../goaldiggerProlog" as knowledge.
use "../goaldiggerAction" as actionspec.

/**
 * Handles calculating distance of dispensers to agent and manages inserting dispenser data from percept into belief
 *
 */

module updateDispenserData {

	% store unknown dispensers with MD field
	forall percept(thing(X, Y, dispenser, Details)), bel(agentAt(X2, Y2), localize(X, Y, X2, Y2, X3, Y3)), not(bel((thingDispenser(X3, Y3, dispenser, Details, _)))) do 
		insert(thingDispenser(X3, Y3, dispenser, Details, 0)).
		
	% reset old MD values in targetDispenserAt to high number expected to not occur in simulation
	if bel(targetDispenserAt(AltX, AltY, AltBlockType, MDAlt), haveBlockAttached(false,_)), percept(role(worker)) then delete(targetDispenserAt(AltX, AltY, AltBlockType, MDAlt)) 
		+ insert(targetDispenserAt(AltX, AltY, AltBlockType, 1234567)).
		
	% reset old MD values in targetClosestOfAllDispensersAt to high number expected to not occur in simulation
	if bel(targetClosestOfAllDispensersAt(AltX, AltY, AltBlockType, MDAlt), haveBlockAttached(false,_)), percept(role(worker)) then delete(targetClosestOfAllDispensersAt(AltX, AltY, AltBlockType, MDAlt)) 
		+ insert(targetClosestOfAllDispensersAt(AltX, AltY, AltBlockType, 1234567)).
		
	% calculate MD for all stored in bel dispensers
	forall bel(thingDispenser(X, Y, dispenser, Details, MDValue), haveBlockAttached(false,_)), percept(role(worker)), bel(agentAt(X2, Y2), calculateXYMd(X, Y, X2, Y2, Md)) do {	 
		if bel(thingDispenser(X, Y, dispenser, Details, MDValue)) then delete(thingDispenser(X, Y, dispenser, Details, MDValue)) + insert(thingDispenser(X, Y, dispenser, Details, Md)).	
	}
	
	% compare lowest MD value for all stored dispensers CONCERNING ONE BLOCKTYPE
	forall bel(currentChosenTask(_, _, _, _, _, BlockType), haveBlockAttached(false, _), thingDispenser(X, Y, dispenser, BlockType, MDValue)), percept(role(worker)) do {	
		if bel(targetDispenserAt(AltX, AltY, AltBlockType, MDAlt), MDValue < MDAlt) then delete(targetDispenserAt(AltX, AltY, AltBlockType, MDAlt)) + insert(targetDispenserAt(X, Y, BlockType, MDValue)).
	}
	
	% compare lowest MD value for ALL stored dispensers 
	forall bel(thingDispenser(X, Y, dispenser, BlockType, MDValue), haveBlockAttached(false,_)), percept(role(worker)) 
		do {
		if bel(targetClosestOfAllDispensersAt(AltX, AltY, AltBlockType, MDAlt), MDValue < MDAlt) then delete(targetClosestOfAllDispensersAt(AltX, AltY, AltBlockType, MDAlt)) + 
			insert(targetClosestOfAllDispensersAt(X, Y, BlockType, MDValue)).	
	}
	
	% change affinity direction after X steps
	if bel(changeAffinityAfterTheseSteps(ChangeStep)), percept(step(X), X >= 2, 0 is mod(X, ChangeStep)), bel(randomDirection(Dir), randomAffinity(DirOld), DirOld \== Dir) then 
		delete (randomAffinity(DirOld)) + insert (randomAffinity(Dir)).
	
	% check old dispenser request and set switch to false
	if percept(step(Step)), bel(haveDispenserDelivery(true, OnStepX), OnStepX + 1 =< Step) then delete(haveDispenserDelivery(true, OnStepX)) + insert(haveDispenserDelivery(false, Step)).
	
} % module