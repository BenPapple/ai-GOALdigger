use "../../goaldiggerProlog" as knowledge.
use logScoringBoard as module.

/**
 * Handles logging custom data in Our Mini Percept
 *
 * @author Ben G.
 */

module logMiniPercept {

	% debug true for custom percept logging
	if true then {

		% timer timing duration from beginning percept to beginning next percept
		if bel(activateTimer)
			then {
				% cancel timer if no percept of timer
				if not(percept(timer(calculationTimer,_)))
					then canceltimer(calculationTimer).

				%set to -1 in Mini Percept which signals faster than 1 millisecond
				if bel((elapseStepTime(T2)))
					then delete(elapseStepTime(T2)) +
						 insert(elapseStepTime(-1)).

				%find highest timer value in percept
				forall percept(timer(calculationTimer,T1))
					do {
				 		if bel(elapseStepTime(T2), T1 > T2)
				 			then delete(elapseStepTime(T2)) +
				 				 insert(elapseStepTime(T1)).
				 }
				%start timer
				if true then starttimer(calculationTimer,100,1800). % starttimer name,interval,duration
	    } % timer

		if true then print("                ").
	    if true then print("                ").
	    if true then print("====== Our Mini Percept =====").

        if bel(avoidNorm(NormName,dropBlock,StepStart,StepEnd,block,any,0,_,na,na)),
           percept(step(SimStep)),
           bel(SimStep =< StepEnd, SimStep >= StepStart)
            then print("Avoiding Norm: "+NormName+" till step: "+StepEnd).

	    if bel(submitterLeader, positionInHirarchie(PositionInHirarchie))
	        then print("Agent hierarchy position:"| PositionInHirarchie| "submitterLeader").
	    if not(bel(submitterLeader)) ,bel(positionInHirarchie(PositionInHirarchie))
	        then print("Agent hierarchy position:"| PositionInHirarchie).

		% Simulation counter
		if bel(simCount(SimCount))
			then print("This is simulation: " + SimCount).

		% lastactionresults gets handles multiple times because of
		% possible changing number of arguments with var lastActionParams
		if percept(step(Step), role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([]))
			then print(Step|Role+"Agent: "+Result+LastAction).

		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([Para]))
			then print(Step|Role+"Agent: "+Result+LastAction+Para).

		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),
				   lastActionParams([Para, Param2]))
			then print(Step|Role+"Agent: "+Result+LastAction| Para| Param2).

		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),
		           lastActionParams([Para, Param2, Param3]))
			then print(Step|Role+"Agent: "+Result+LastAction| Para| Param2| Param3).

		
		% some extra extra custom percept logging because conditional can be false, others for formatting
	    if bel(agentAt(X, Y, _), targetMd(A, B, Target))
	    	then print("This step AgentAt: "| X| Y+"TargetMD: "| A| B| Target).

	    if bel(currentChosenTask(_, _, _, _, _, _, submittingAgentTwoTask, NameSupporter)),
	       bel(storedOtherAgentStatus(NameSupporter, _, _, _, _, X, Y, Block, _)),
	       bel(confirmedOffsetOfAgent(OffsetX,OffsetY,NameSupporter)),
	       bel(XNew is X + OffsetX, YNew is Y + OffsetY)
	     	then print("Supporter AgentAt: "| XNew| YNew+"Block: "| Block).

		if bel(currentChosenTask(TaskName, TaskStep, Reward, X, Y, BlockType, ClientServer, NameSubmitter))
			then print("MyTask: "+TaskName+TaskStep+Reward| X| Y+BlockType| ClientServer| NameSubmitter).

		if bel(multiTaskSupporterStatus(_, NameSuppo1, _, _, _, Ack1, _, NameSuppo2, _, _, _, Ack2, _, NameSuppo3, 
		                                _, _, _, Ack3, _))
			then print("2-BLOCK: "| NameSuppo1 | Ack1+"3-BLOCK: "| NameSuppo2 | Ack2+"4-BLOCK: " |NameSuppo3 | Ack3).

		if bel(targetDispenserAt(X2, Y2, BlockTypeNew, Md))
			then print("TargetDispenser: "| X2| Y2+"Block+Distance: "| BlockTypeNew| Md).

		if bel(targetClosestGoalZone(X, Y, MD))
			then print("TargetGoalZone: "| X| Y+"Distance: "| MD).

		if bel(executeManhattan)
			then print("Manhattan Switch Active").
		if not(bel(executeManhattan))
			then print("Manhattan Switch Inactive").

		if bel(haveBlockAttached(BoolBlock, Dir), haveDispenserDelivery(BoolDelivery, _))
			then print("HaveBlock:"+BoolBlock+" Direction: "+Dir+"HaveDelivery:"+BoolDelivery).

		if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, X, Y)),
		   percept(attached(X, Y), thing(X, Y, block, BlockType))
		   	then print("Attached:"| X| Y +BlockType).

		% Separator
		if true then print("++++++ MISC DATA ++++++++++++").
		if percept(step(SimStep)), bel(elapseStepTime(T1), calculateMinusOne(SimStep, SimStep2))
			then print("Calculated time for Step"+SimStep2+"in milliseconds: "+ T1).
		if percept(energy(Ener), deactivated(Status)),
		   bel(lastDeactivationTracker(LastStepDeactivated))
			then print("Energy:"+Ener| "Deactivated:"+Status+" Last deactivation on step: "+LastStepDeactivated).
		if bel(changeAffinityAfterTheseSteps(Change), randomAffinity(Affi), randomSeed(Seed))
			then print("Affinity:"+Affi|"Change after:"+Change|"Seed:"+Seed).
		if percept(goalZone(0, 0))
			then print("Agent is in GoalZone").
		if percept(roleZone(0, 0))
			then print("Agent is in RoleZone").
		if percept(thing(0, 0, dispenser, X))
			then print("Agent is on Dispenser"+X).
		if bel(worldSizeX(X), worldSizeY(Y))
			then print("Agent knows this world size: X"+X+", Y"+Y+".").
		if bel(worldListX(ListX), worldListY(ListY))
			then print("Agent knows this world size: XList"+ListX+", YList"+ListY+".").
		if bel(customRole(customRoleSaboteur)) then {
			if true then print("This is a saboteur.").
			if bel(emptyGoalZoneCounter(_,_,_)) then print("Empty goal zones:").
			if not(bel(emptyGoalZoneCounter(_,_,_))) then print("No empty goal zones found.").
			forall bel(emptyGoalZoneCounter(A,B,C)) do print(A+" "+B+" "+C).
	       if true then print("Targets of the saboteur:").
	       forall bel(clearingTarget(A,B)) do print("Clearing target: "+A+" "+B).
	       if true then print("Agend sighted by the saboteur:").
	       forall bel(agentSighting(A,B,C,D,E,F,G,H)) do print("Agent sighted: "+A+" "+B+" "+C+" "+D+" "+E+" "+F+" "+G+" "+H).
		   if true then print("Inactive sightings").
		   forall bel(inactiveSighting(A,B,C)) do print("Inactive sighting: "+A+" "+B+" "+C).
		}

		if true then print("====== End Mini Percept =====").
		if true then print("                ").
	    if true then print("                ").


		%logging percept base, message base, believe base
		%if true then log(pb) + log(mb) + log(bb) + log(gb).
		%if true then log(pb) + log(mb) + log(bb).
		if true then log(pb) + log(bb).
		
		} % debug

}
