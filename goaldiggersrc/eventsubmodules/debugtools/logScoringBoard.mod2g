use "../../goaldiggerProlog" as knowledge.

/**
 * Log made points by agents, logs always useful for benchmark when big log MiniPercept deactivated
 *
 * @author Ben G.
 */

module logScoringBoard {

    % submitterLeader
    if percept(step(SimStep), SimStep == 25), bel(submitterLeader) 
    	then print("I am your SubmitterLeader!").
    	
    % saboteur
    if percept(step(SimStep), SimStep == 25), bel(customRole(customRoleSaboteur)) 
    	then print("I am the sneaky saboteur!").

    % 2Task success logging
	if bel(submitterLeader), 
	   percept(lastActionResult(success), lastAction(submit), lastActionParams([TaskName])),
	   bel(currentChosenTask(TaskName, _, 40, _, _, _, _, _))
	    then {
	        if percept(name(MyName))
	            then all.send(made40Points(MyName)).
	 }

	% 3Task success logging
	if bel(submitterLeader), 
	   percept(lastActionResult(success), lastAction(submit), lastActionParams([TaskName])),
	   bel(currentChosenTask(TaskName, _, 90, _, _, _, _, _))
	    then {
	        if percept(name(MyName)) 
	            then all.send(made90Points(MyName)).
	 }
	 
	% 4Task success logging
	if bel(submitterLeader), 
	   percept(lastActionResult(success), lastAction(submit), lastActionParams([TaskName])),
	   bel(currentChosenTask(TaskName, _, 160, _, _, _, _, _))
	    then {
	        if percept(name(MyName)) 
	            then all.send(made160Points(MyName)).
	 }	 
	 
	% score messages
	forall (_).sent(made40Points(Name)),
	       bel(simCount(SimCount)),
	       percept(step(SimStep))
	    do {
	        if bel(count2Task(Num2Task, OldStep), 
		       NewCount is Num2Task +1, SimStep >= OldStep),
		       bel(count2Task(Num2Task, OldStep))
	            then delete(count2Task(Num2Task, OldStep)) +
	                 insert(count2Task(NewCount, SimStep)).
	        if bel(count2Task(NumUpd, _), cachedCount2Task(V1)) 
	            then delete(cachedCount2Task(V1)) + insert(cachedCount2Task(NumUpd)).	    
		    if true then print("40 Points by "+Name+" on step "+SimStep+" in sim "+SimCount).
	    }
	forall (_).sent(made90Points(Name)),
	       bel(simCount(SimCount)),
	       percept(step(SimStep))
	    do {
	        if bel(count3Task(Num3Task, OldStep), 
		       NewCount is Num3Task +1, SimStep >= OldStep),
		       bel(count3Task(Num3Task, OldStep))
	            then delete(count3Task(Num3Task, OldStep)) +
	                 insert(count3Task(NewCount, SimStep)).
	        if bel(count3Task(NumUpd, _), cachedCount3Task(V1)) 
	            then delete(cachedCount3Task(V1)) + insert(cachedCount3Task(NumUpd)).	    
		    if true then print("90 Points by "+Name+" on step "+SimStep+" in sim "+SimCount).
	    }
	forall (_).sent(made160Points(Name)),
	       bel(simCount(SimCount)),
	       percept(step(SimStep))
	    do {
	        if bel(count4Task(Num4Task, OldStep), 
		       NewCount is Num4Task +1, SimStep >= OldStep),
		       bel(count4Task(Num4Task, OldStep))
	            then delete(count4Task(Num4Task, OldStep)) +
	                 insert(count4Task(NewCount, SimStep)).
	        if bel(count4Task(NumUpd, _), cachedCount4Task(V1)) 
	            then delete(cachedCount4Task(V1)) + insert(cachedCount4Task(NumUpd)).	    
		    if true then print("160 Points by "+Name+" on step "+SimStep+" in sim "+SimCount).
	    }   

    % print qtable ML
    if percept(step(X), X >= 25, 0 =:= mod(X, 25)),
       bel(submitterLeader, qtable(Q2, Q3, Q4, Task2, Task3, Task4)) 
        then print("Q-table: "|Q2+Q3+Q4|" Chance: "|Task2+Task3+Task4+" on step: "|X).

	% score table sim end
    if bel(stopScoreLogging(LastLog)),
       not(percept(score(Score1), score(Score2), Score1 \= Score2)),
       percept(score(Score1), 
               steps(MaxStep), EndStep is MaxStep -1, step(EndStep)),
       bel(cachedCount2Task(Num2Task),cachedCount3Task(Num3Task), cachedCount4Task(Num4Task), simCount(SimCount), 
           SimCount > LastLog) 
       	then print("Simulation"+SimCount+"ended with Score: "+Score1+" : "+
       			   " 2Task: "+Num2Task+" 3Task: "+Num3Task+" 4Task: "+Num4Task) +
		     delete(cachedCount2Task(Num2Task)) + 
		     insert(cachedCount2Task(0)) +
		     delete(cachedCount3Task(Num3Task)) + 
		     insert(cachedCount3Task(0)) +
		     delete(cachedCount4Task(Num4Task)) + 
		     insert(cachedCount4Task(0)) +
		     delete(stopScoreLogging(LastLog)) + 
		     insert(stopScoreLogging(SimCount)).

	% score table sim end
    if bel(stopScoreLogging(LastLog)),
       percept(score(Score1), score(Score2), Score1 \= Score2, 
               steps(MaxStep), EndStep is MaxStep -1, step(EndStep)),
       bel(cachedCount2Task(Num2Task),cachedCount3Task(Num3Task), cachedCount4Task(Num4Task), simCount(SimCount), 
           SimCount > LastLog) 
       	then print("Simulation"+SimCount+"ended with Score: "+Score1+" : "+Score2+
       			   " 2Task: "+Num2Task+" 3Task: "+Num3Task+" 4Task: "+Num4Task) +
		     delete(cachedCount2Task(Num2Task)) + 
		     insert(cachedCount2Task(0)) +
		     delete(cachedCount3Task(Num3Task)) + 
		     insert(cachedCount3Task(0)) +
		     delete(cachedCount4Task(Num4Task)) + 
		     insert(cachedCount4Task(0)) +		     
		     delete(stopScoreLogging(LastLog)) + 
		     insert(stopScoreLogging(SimCount)).
		     
    % store sim time from unix time
    if percept(timestamp(Time1), step(4)),
       bel(simDuration(TimeOld))
        then delete(simDuration(TimeOld)) +
             insert(simDuration(Time1)).
        
    % calculate sim time from unix time
    if bel(stopDurationLogging(LastLog)),
       bel(simCount(SimCount), SimCount > LastLog),
       percept(timestamp(TimeNew), steps(MaxStep), EndStep is MaxStep -1, step(EndStep)),
       bel(simDuration(TimeOld)),
       bel(AllSeconds is integer((TimeNew - TimeOld) * 0.001)),
       bel(DurationMinutes is  integer(AllSeconds / 60)),
       bel(DurationSeconds is  mod(AllSeconds, 60))
        then delete(stopDurationLogging(LastLog)) + 
		     insert(stopDurationLogging(SimCount)) + 
		     print("Simulation"+SimCount+"ended in "+DurationMinutes+" Minutes and "+
		           DurationSeconds+" seconds.").    
	
	% just print it to find submitterleader in logs	 
    forall (_).sent(msgSubmitterLeader(MyName)) do print(MyName+" is submitterLeader!").
    
    % just print it to find saboteur in logs	 
    forall (_).sent(msgCustomRole(MyName)) do print(MyName+" is the saboteur!").
    
    % success saboteur attach
    if bel(customRole(customRoleSaboteur)),
       percept(lastActionResult(success), lastAction(attach))
        then print("Saboteur tackled enemy!").    
		
}