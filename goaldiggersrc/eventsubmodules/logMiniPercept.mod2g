use "../goaldiggerProlog" as knowledge.

/**
 * Handles logging custom data in Our Mini Percept
 *
 */

module logMiniPercept {

	% debug true for custom percept logging
	if true then {
	
		% timer timing duration from beginning percept to beginning next percept
		
		% cancel timer if no percept of timer
		%if not(percept(timer(calculationTimer,_))) then canceltimer(calculationTimer).
		
		%set to -1 in Mini Percept which signals faster than 1 millisecond
		if bel((elapseStepTime(T2))) then delete(elapseStepTime(T2)) + insert(elapseStepTime(-1)).
		
		%find highest timer value in percept
		forall percept(timer(calculationTimer,T1)) do {
		 if bel(elapseStepTime(T2), T1 > T2) then delete(elapseStepTime(T2)) + insert(elapseStepTime(T1)).  
		 }

		%start timer
		if true then starttimer(calculationTimer,100,4000). % starttimer name,interval,duration
	
		% lastactionresults gets handles multiple times because of possible changing number of arguments with var lastActionParams
		
		if percept(step(Step), role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([])) then 
			print("====== Our Mini Percept =====") 
			+ print(Step|Role+"Agent: "+Result+LastAction).
			
		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([Para])) then 
			print("====== Our Mini Percept =====") 
			+ print(Step|Role+"Agent: "+Result+LastAction+Para).
			
		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([Para, Param2])) then 
			print("====== Our Mini Percept =====") 
			+ print(Step|Role+"Agent: "+Result+LastAction| Para| Param2).
			
		% some extra extra custom percept logging because conditional can be false, others for formatting

		if bel(agentAt(X, Y), targetMd(A, B, Target)) then print("This step AgentAt: "| X| Y+"TargetMD: "| A| B| Target).
		
		if bel(currentChosenTask(TaskName, TaskStep, Reward, X, Y, BlockType, ClientServer, NameSubmitter)) then print("MyTask: "+TaskName+TaskStep+Reward| X| Y+BlockType| ClientServer| NameSubmitter).
		
		if bel(targetDispenserAt(X2, Y2, BlockTypeNew, Md)) then print("TargetDispenser: "| X2| Y2+"Block+Distance: "| BlockTypeNew| Md).
		
		if bel(targetClosestGoalZone(X, Y, MD)) then print("TargetGoalZone: "| X| Y+"Distance: "| MD).	
		
		if bel(executeManhattan) then print("Manhattan Switch Active").
		if not(bel(executeManhattan)) then print("Manhattan Switch Inactive").
		
		if bel(haveBlockAttached(BoolBlock, _), haveDispenserDelivery(BoolDelivery, _)) then print("HaveBlock:"+BoolBlock| "HaveDelivery:"+BoolDelivery).	
		
		% Separator
		if true then print("++++++ MISC DATA ++++++++++++").
		
		if percept(step(SimStep)), bel(elapseStepTime(T1), calculateMinusOne(SimStep, SimStep2))  then print("Calculated time for Step"+SimStep2+"in milliseconds: "+ T1).		
				
		if percept(energy(Ener), deactivated(Status)) then print("Energy:"+Ener| "Deactivated:"+Status).
		
		if bel(changeAffinityAfterTheseSteps(Change), randomAffinity(Affi), randomSeed(Seed)) then print("Affinity:"+Affi|"Change after:"+Change|"Seed:"+Seed).
		
		if percept(attached(X, Y), thing(X, Y, block, BlockType), X =< 1, Y =< 1) then print("Attached:"| X| Y +BlockType).
		
		if percept(goalZone(0, 0)) then print("Agent is in GoalZone").
		
		if percept(roleZone(0, 0)) then print("Agent is in RoleZone").
		
		if percept(thing(0, 0, dispenser, X)) then print("Agent is on Dispenser"+X).
		
		if bel(worldUpdatedX, worldUpdatedY, ownName(Name), worldSizeX(X), worldSizeY(Y)) then print("Agent "+Name+" knows this world size: "+X+", "+Y+"."). 
		
		if true then print("====== End Mini Percept =====").
		
		% logging percept base, message base, believe base
		if true then log(pb) + log(mb) + log(bb) + log(gb).
		
	} % debug
	
}