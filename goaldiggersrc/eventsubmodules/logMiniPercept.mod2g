use "../goaldiggerProlog" as knowledge.

/**
 * Handles logging custom data in Our Mini Percept
 *
 */

module logMiniPercept {

	% debug true for custom percept logging
	if true then {
	
		% timer timing duration from beginning percept to beginning next percept
		
		% cancel timer if no percept of timer
		%if not(percept(timer(calculationTimer,_))) then canceltimer(calculationTimer).
				
		%set to -1 in Mini Percept which signals faster than 1 millisecond
		%if bel((elapseStepTime(T2))) then delete(elapseStepTime(T2)) + insert(elapseStepTime(-1)).
		
		%find highest timer value in percept
%		forall percept(timer(calculationTimer,T1)) do {
%		 if bel(elapseStepTime(T2), T1 > T2) then delete(elapseStepTime(T2)) + insert(elapseStepTime(T1)).  
%		 }

		%start timer
		%if true then starttimer(calculationTimer,100,1800). % starttimer name,interval,duration
		
		if true then print("                ").
	    if true then print("                ").
	
	    if true then print("====== Our Mini Percept =====").
	
	    if bel(submitterLeader, positionInHirarchie(PositionInHirarchie)) 
	        then print("Agent hierarchy position:"| PositionInHirarchie| "submitterLeader").
	    if not(bel(submitterLeader)) ,bel(positionInHirarchie(PositionInHirarchie)) 
	        then print("Agent hierarchy position:"| PositionInHirarchie).
	    
	    % score table sim end
	    if percept(score(Score1), score(Score2), Score1 \= Score2, ranking(Ranked), simEnd, step(0)),
	       bel(cashedCount2Task(Num2Task),simCount(SimCount)) then 
			print("Simulation"+SimCount+"ended with agent ranked: "|Ranked+"Score: "+Score1+" : "+Score2+" 2Task: "+Num2Task)
			+ delete(cashedCount2Task(Num2Task)) + insert(cashedCount2Task(0)).
		if percept(score(Score1), score(Score2), Score1 \= Score2, ranking(Ranked), simEnd, step(749)),
		   bel(simCount(5), cashedCount2Task(Num2Task)) then 
			print("Simulation 5 ended with agent ranked: "|Ranked+"Score: "+Score1+" : "+Score2+" 2Task: "+Num2Task)
			+ delete(cashedCount2Task(Num2Task)) + insert(cashedCount2Task(0)).
	    
	    % 2Task success logging
		if bel(submitterLeader, step(CurrentStep), simCount(SimCount)), 
		   percept(lastActionResult(success), lastAction(submit), lastActionParams([TaskName])),
		   bel(currentChosenTask(TaskName, _, 40, _, _, _, _, _), count2Task(Num2Task, OldStep), 
		       NewCount is Num2Task +1, CurrentStep > OldStep)
		    then {
		        if bel(count2Task(Num2Task, OldStep)) 
		            then delete(count2Task(Num2Task, OldStep)) 
		                 + insert(count2Task(NewCount, CurrentStep))
		                 + print("Agent made 40 Points  On Step " + CurrentStep + " In Sim " + 
		                         SimCount+"2TaskGoals: "+NewCount).
		        if bel(count2Task(NumUpd, _), cashedCount2Task(V1)) 
		            then delete(cashedCount2Task(V1)) + insert(cashedCount2Task(NumUpd)).
		 }
		    
		% Simulation counter
		if bel(simCount(SimCount)) then print("This is simulation: " + SimCount).
	
		% lastactionresults gets handles multiple times because of possible changing number of arguments with var lastActionParams
		
		if percept(step(Step), role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([])) then 
			print(Step|Role+"Agent: "+Result+LastAction).
			
		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([Para])) then 
			print(Step|Role+"Agent: "+Result+LastAction+Para).
			
		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([Para, Param2])) then 
			print(Step|Role+"Agent: "+Result+LastAction| Para| Param2).
			
		if percept(step(Step),role(Role), lastActionResult(Result), lastAction(LastAction),lastActionParams([Para, Param2, Param3])) then 
			print(Step|Role+"Agent: "+Result+LastAction| Para| Param2| Param3).
			
		% some extra extra custom percept logging because conditional can be false, others for formatting

        if bel(agentAt(X, Y, _), targetMd(A, B, Target)) then print("This step AgentAt: "| X| Y+"TargetMD: "| A| B| Target).
        
        if bel(currentChosenTask(_, _, _, _, _, _, submittingAgentTwoTask, NameSupporter)),
           bel(storedOtherAgentStatus(NameSupporter, _, _, _, _, X, Y, Block)),
           bel(confirmedOtherAgentAt(OffsetX,OffsetY,NameSupporter)),
           bel(XNew is X + OffsetX, YNew is Y + OffsetY)
         then print("Supporter AgentAt: "| XNew| YNew+"Block: "| Block).
		
		if bel(currentChosenTask(TaskName, TaskStep, Reward, X, Y, BlockType, ClientServer, NameSubmitter)) then print("MyTask: "+TaskName+TaskStep+Reward| X| Y+BlockType| ClientServer| NameSubmitter).
		
		if bel(targetDispenserAt(X2, Y2, BlockTypeNew, Md)) then print("TargetDispenser: "| X2| Y2+"Block+Distance: "| BlockTypeNew| Md).
		
		if bel(targetClosestGoalZone(X, Y, MD)) then print("TargetGoalZone: "| X| Y+"Distance: "| MD).	
		
		if bel(executeManhattan) then print("Manhattan Switch Active").
		if not(bel(executeManhattan)) then print("Manhattan Switch Inactive").
		
		if bel(haveBlockAttached(BoolBlock, _), haveDispenserDelivery(BoolDelivery, _)) then print("HaveBlock:"+BoolBlock| "HaveDelivery:"+BoolDelivery).	
		
		if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, X, Y)),
		   percept(attached(X, Y), thing(X, Y, block, BlockType)) then print("Attached:"| X| Y +BlockType).
		
		% Separator
		if true then print("++++++ MISC DATA ++++++++++++").
		
		if percept(step(SimStep)), bel(elapseStepTime(T1), calculateMinusOne(SimStep, SimStep2))  then print("Calculated time for Step"+SimStep2+"in milliseconds: "+ T1).		
				
		if percept(energy(Ener), deactivated(Status)) then print("Energy:"+Ener| "Deactivated:"+Status).
		
		if bel(changeAffinityAfterTheseSteps(Change), randomAffinity(Affi), randomSeed(Seed)) then print("Affinity:"+Affi|"Change after:"+Change|"Seed:"+Seed).
		
		if percept(goalZone(0, 0)) then print("Agent is in GoalZone").
		
		if percept(roleZone(0, 0)) then print("Agent is in RoleZone").
		
		if percept(thing(0, 0, dispenser, X)) then print("Agent is on Dispenser"+X).
		
		if bel(worldSizeX(X), worldSizeY(Y)) then print("Agent knows this world size: "+X+", "+Y+"."). 
		if bel(worldListX(ListX), worldListY(ListY)) then print("Agent knows this world size: "+ListX+", "+ListY+".").
		
		if true then print("====== End Mini Percept =====").
		
		if true then print("                ").
	    if true then print("                ").
		
		% logging percept base, message base, believe base
		if true then log(pb) + log(mb) + log(bb) + log(gb).
		
	} % debug
	
}