use goaldiggerProlog as knowledge.
use goaldiggerAction as actionspec.
use "./eventsubmodules/updateDispenserData" as module.
use "./eventsubmodules/updateGoalzoneData" as module.
use "./eventsubmodules/logMiniPercept" as module.
use "./eventsubmodules/handleLastActionResult" as module.

/**
 * Gets executed everytime a percept or message is received and handles them
 *
 */

module goaldiggerEvent {

	/**
	 * SUBMODULE DEBUG WITH OUR MINI PERCEPT
	 *
	 */
	if bel(lDebugOn(true)) then logMiniPercept.

	
	/**
	 * SUBMODULE MANAGING SUCCESS AND PARTIAL_SUCCESS PERCEPTS
	 *
	 */
	if true then handleLastActionResult.

	
	/**
	 * SUBMODULE UPDATE GOALZONE MAP
	 *
	 */
	if true then updateGoalzoneData.


	/**
	 * SUBMODULE UPDATE DISPENSER MAP
	 *
	 */
	if true then updateDispenserData.
	
	/**
	 * MISCELLANEOUS POST EVERYTHING
	 *
	 */	
	 
	% check attached block direction for block and if none found switch haveBlockAttached false
	if bel(haveBlockAttached(true, DirBlock), executeManhattan(Old), directionToCoordinate(DirBlock, X, Y)), not(percept(attached(X, Y))) then 
		delete(haveBlockAttached(true, DirBlock)) + insert(haveBlockAttached(false, DirBlock)) + delete(executeManhattan(Old)) + insert(executeManhattan(false)).
	
	% when role default store first seen RoleZone coordinates as targetMd
	if percept(roleZone(X, Y), role(default)), bel(executeManhattan(false), agentAt(X2, Y2), targetMd(X4, Y4), localize(X, Y, X2, Y2, X3, Y3)) then 
		delete(targetMd(X4, Y4)) + insert(targetMd(X3, Y3)) + delete(executeManhattan(false)) + insert(executeManhattan(true)).

	% when at manhattan target deactivate manhattan switch, XY same Coord or one value max 1 different 
	if bel(haveBlockAttached(false,_), targetMd(X, Y), agentAt(A, B), abs(A)-abs(X) =< 1, abs(B)-abs(Y) =< 1, executeManhattan(true)) then delete(executeManhattan(true)) + insert(executeManhattan(false)).
	% deactivate manhattan switch if in goalzone with block
	if bel(haveBlockAttached(true,_), targetMd(X, Y), agentAt(A, B), A == X, B == Y, executeManhattan(true)), percept(goalZone(0, 0)) then delete(executeManhattan(true)) + insert(executeManhattan(false)).
		
	% when role worker with block put first seen goalzone coordinates as targetMd
	if percept(goalZone(X, Y), role(worker)), bel(haveBlockAttached(true,_), executeManhattan(false), agentAt(X2, Y2), targetMd(X4, Y4), localize(X, Y, X2, Y2, X3, Y3)) then 
		delete(targetMd(X4, Y4)) + insert(targetMd(X3, Y3)) + delete(executeManhattan(false)) + insert(executeManhattan(true)).
	
	% when role worker with block put from percept seen goalzone coordinates as targetMd because of disappearing goalzones
	if percept(goalZone(X, Y), role(worker)), bel(executeManhattan(true), haveBlockAttached(true,_), agentAt(X2, Y2), targetMd(X4, Y4), localize(X, Y, X2, Y2, X3, Y3)) then 
		delete(targetMd(X4, Y4)) + insert(targetMd(X3, Y3)).
	
	% when role worker on goalzone without block deactivate manhattan switch
	if percept(goalZone(0, 0), role(worker)), bel(haveBlockAttached(false,_)), bel(executeManhattan(true)) then delete(executeManhattan(true)) + insert(executeManhattan(false)).
	
	% when role worker with block because of disappearing goalzones has to check if goal around manhattan target
	if percept(haveBlockAttached(true,_), role(worker)), not(percept(goalZone(_, _))), bel(executeManhattan(true), agentAt(X2, Y2), targetMd(X4, Y4), abs(X2 - X4) + abs(Y2 - Y4) =< 2 ) then 
		delete(executeManhattan(true)) + insert(executeManhattan(false)).

	% Update step counter with new step when new percept step available
	%if percept(step(X)), bel(step(Y), X\==Y, X>0, haveMove(false)) then delete(step(Y)) + insert(step(X)).
	if percept(step(X)), bel(step(Y), X\==Y, X>0, haveMove(Old)) then delete(step(Y)) + insert(step(X)) + delete(haveMove(Old)) + insert(haveMove(false)).
		
	% With block update goalzone target MD
	if bel(haveBlockAttached(true, _), targetMd(X, Y), targetClosestGoalZone(A, B, _), executeManhattan(BoolOld)) then delete(targetMd(X, Y)) + insert(targetMd(A, B)) 
		+ delete(executeManhattan(BoolOld)) + insert(executeManhattan(true)).
	
} % module