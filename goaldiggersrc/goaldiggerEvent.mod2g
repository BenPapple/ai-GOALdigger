use goaldiggerProlog as knowledge.
use goaldiggerAction as actionspec.
use "./eventsubmodules/updateDispenserData" as module.
use "./eventsubmodules/updateGoalzoneData" as module.
use "./eventsubmodules/logMiniPercept" as module.
use "./eventsubmodules/handleLastActionResult" as module.
use "./eventsubmodules/handleRelativeCoordsOfAgents" as module.
use "./eventsubmodules/reinitBeliefOnSimChange" as module.
use "./eventsubmodules/manageManhattanSwitchStatus" as module.
use "./eventsubmodules/manageManhattanTarget" as module.

/**
 * Gets executed everytime a percept or message is received and handles them
 *
 */

module goaldiggerEvent {
	
	% ToDo add Isaac
	
	/**
	 * SUBMODULE REINITIALIZE BELIEF AFTER SIMULATION CHANGES
	 *
	 */
	if percept(step(0)) then reinitBeliefOnSimChange.
	
	% Update step counter with new step when new percept step available
	if percept(step(X)), bel(step(Y), X\==Y, X>0) then delete(step(Y)) + insert(step(X)).
	
		% STORE unknown dispensers from percept with MD field
	forall percept(thing(X, Y, dispenser, Details)), bel(agentAt(X2, Y2), localize(X, Y, X2, Y2, X3, Y3)), not(bel((storedDispenser(X3, Y3, dispenser, Details, _, _)))) do 
		insert(storedDispenser(X3, Y3, dispenser, Details, 0, false)).
		

	% DELETE dispenser from belief if not seen in percept		
	forall bel(storedDispenser(X1, Y1, dispenser, Details, MDValue, Bool), agentAt(X2, Y2), X3 is X1 - X2, Y3 is Y1 - Y2, abs(X3) + abs(Y3) =< 5), not(percept(thing(X3, Y3, dispenser, _))) 
		do delete(storedDispenser(X1, Y1, dispenser, Details, MDValue, Bool)). 
	
	/**
	 * SUBMODULE MANAGING SUCCESS AND PARTIAL_SUCCESS PERCEPTS
	 *
	 */
	if true then handleLastActionResult.







	/**
	 * SUBMODULE DEBUG WITH OUR MINI PERCEPT
	 *
	 */
	if bel(lDebugOn) then logMiniPercept.	
	
	/**
	 * SUBMODULE MANAGING MESSAGES !!! PLACE AFTER handleLastActionResult MOVE !!!
	 *
	 */
	if true then handleRelativeCoordsOfAgents.

	
	/**
	 * SUBMODULE UPDATE GOALZONE MAP
	 *
	 */
	if bel(haveBlockAttached(true, _)), percept(role(worker)) then updateGoalzoneData.


	/**
	 * SUBMODULE UPDATE DISPENSER MAP
	 *
	 */
	if bel(haveBlockAttached(false, _)), percept(role(worker)) then updateDispenserData.	

	/**
	 * MISC SWITCH MANIPULATION
	 *
	 */	

	% check old dispenser request and set switch to false
	if percept(step(Step)), bel(haveDispenserDelivery(true, OnStepX), OnStepX + 1 =< Step) then delete(haveDispenserDelivery(true, OnStepX)) + insert(haveDispenserDelivery(false, Step)).
	
	% check attached block direction for block and if none found switch haveBlockAttached false
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, X, Y)), not(percept(attached(X, Y))) then 
		delete(haveBlockAttached(true, DirBlock)) + insert(haveBlockAttached(false, DirBlock)).

	/**
	 * SUBMODULE MANHATTAN SWITCH MANIPULATION
	 *
	 */	
	 if true then manageManhattanSwitchStatus.		
	
	
	/**
	 * MISCELLANEOUS POST EVERYTHING
	 *
	 */	
	 
	% change affinity direction after X steps
	if bel(changeAffinityAfterTheseSteps(ChangeStep)), percept(step(X), X >= 2, 0 =:= mod(X, ChangeStep)), bel(randomAffinity(DirOld), randomGoForwardDirection(DirOld, NewDir)) then 
		delete (randomAffinity(DirOld)) + insert (randomAffinity(NewDir)).
	
	/**
	 * SUBMODULE MANHATTAN TARGET MANIPULATION
	 *
	 */	
	 if true then manageManhattanTarget.
	 
	/**
	 * ACTIVATE MAIN LOOP
	 *
	 */	
	
	% prepare action chosing in main module
	if bel(haveMove), percept(step(SimStep), SimStep >= 0) then delete(haveMove).
	
} % module