use goaldiggerProlog as knowledge.
use goaldiggerAction as actionspec.
use "./eventsubmodules/updateDispenserData" as module.
use "./eventsubmodules/updateGoalzoneData" as module.
use "./eventsubmodules/logMiniPercept" as module.
use "./eventsubmodules/handleLastActionResult" as module.
use "./eventsubmodules/handleRelativeCoordsOfAgents" as module.
use "./pathfinding/manageManhattanSwitchStatus" as module.
use "./pathfinding/manageManhattanTarget" as module.

/**
 * Gets executed everytime a percept or message is received and handles them
 *
 */

module goaldiggerEvent {

	/**
	 * SUBMODULE DEBUG WITH OUR MINI PERCEPT
	 *
	 */
	if bel(lDebugOn) then logMiniPercept.	
	
	% Update step counter with new step when new percept step available
	if percept(step(X)), bel(step(Y), X\==Y, X>0) then delete(step(Y)) + insert(step(X)).
	
	/**
	 * SUBMODULE MANAGING SUCCESS AND PARTIAL_SUCCESS PERCEPTS
	 *
	 */
	if true then handleLastActionResult.
	
	/**
	 * SUBMODULE MANAGING MESSAGES !!! PLACE AFTER handleLastActionResult MOVE !!!
	 *
	 */
	if true then handleRelativeCoordsOfAgents.

	
	/**
	 * SUBMODULE UPDATE GOALZONE MAP
	 *
	 */
	if bel(haveBlockAttached(true, _)) then updateGoalzoneData.


	/**
	 * SUBMODULE UPDATE DISPENSER MAP
	 *
	 */
	if bel(haveBlockAttached(false, _)), percept(role(worker)) then updateDispenserData.	

	/**
	 * MISC SWITCH MANIPULATION
	 *
	 */	

	% check old dispenser request and set switch to false
	if percept(step(Step)), bel(haveDispenserDelivery(true, OnStepX), OnStepX + 1 =< Step) then delete(haveDispenserDelivery(true, OnStepX)) + insert(haveDispenserDelivery(false, Step)).
	
	% check attached block direction for block and if none found switch haveBlockAttached false
	if bel(haveBlockAttached(true, DirBlock), directionToCoordinate(DirBlock, X, Y)), not(percept(attached(X, Y))) then 
		delete(haveBlockAttached(true, DirBlock)) + insert(haveBlockAttached(false, DirBlock)).
		

	/**
	 * SUBMODULE MANHATTAN SWITCH MANIPULATION
	 *
	 */	
	 if true then manageManhattanSwitchStatus.		
	
	
	/**
	 * MISCELLANEOUS POST EVERYTHING
	 *
	 */	
	 
	% change affinity direction after X steps
	if bel(changeAffinityAfterTheseSteps(ChangeStep)), percept(step(X), X >= 2, 0 is mod(X, ChangeStep)), bel(randomAffinity(DirOld), randomGoForwardDirection(DirOld, NewDir)) then 
		delete (randomAffinity(DirOld)) + insert (randomAffinity(NewDir)).
	
	/**
	 * SUBMODULE MANHATTAN TARGET MANIPULATION
	 *
	 */	
	 if true then manageManhattanTarget.
	 
	/**
	 * ACTIVATE MAIN LOOP
	 *
	 */	
	
	% prepare action chosing in main module
	if bel(haveMove) then delete(haveMove).
	
} % module